{"version":3,"sources":["App.js","game/entities/entity.ts","game/entities/activeEntity.ts","game/map/tile.ts","game/constants.ts","game/entities/environment/wall.ts","game/entities/environment/floor.ts","game/entities/environment/stairs.ts","game/map/map.ts","game/entities/player.ts","game/entities/enemies/bat.ts","game/entities/enemies/zombie.ts","game/entities/environment/torch.ts","game/logger/message.ts","game/logger/logger.ts","game/game.ts","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","Entity","props","Object","classCallCheck","this","id","character","color","backgroundColor","priority","collideable","active","secondEntity","ActiveEntity","_this","possibleConstructorReturn","getPrototypeOf","call","x","y","game","engine","lock","topology","_this2","player","getX","getY","astar","ROT","AStar","map","isSpaceOccupied","path","compute","push","shift","length","moveEntity","actUponSpaceByEnemy","removeEntity","removeSelf","Tile","entity","_entities","Array","forEach","actUponByEnemy","actUponByPlayer","i","equals","highestPriorityEntity","getPriority","getCollideable","immoveable","foundEntity","find","existingEntity","splice","indexOf","FONT_SIZE","DISPLAY_WIDTH","MAP_HEIGHT","CONSOLE_HEIGHT","GENERIC_COLOR","PLAYER","ID","CHAR","COLOR","PRIORITY","VISION_RADIUS","BAT","ZOMBIE","FLOOR","TORCH","UNLIT_COLOR","LIT_COLOR","STAIRS","WALL","MAP_TYPE","ARENA","CELLULAR","DUNGEON_DIGGER","DUNGEON_ROGUE","DUNGEON_UNIFORM","MAZE_DIVIDED","MAZE_ELLER","MAZE_ICEY","ID_UPPER_BOUND","MOVEMENT_KEYCODES","38","56","33","57","39","54","34","51","40","50","35","49","37","52","36","55","Wall","RNG","getUniformInt","Floor","Stairs","Map","_map","display","create2DArrayOfTiles","width","height","fontSize","generateMap","array","getDisplayedTile","draw","getCharacter","getColor","getBackgroundColor","type","arguments","undefined","addDisplayToDOM","mapper","Arena","Cellular","born","survive","randomize","Digger","corridorLength","dugPercentage","roomHeight","roomWidth","Rogue","Uniform","roomDugPercentage","DividedMaze","EllerMaze","IceyMaze","mapperCallback","value","create","bind","freeTiles","isCollideable","clear","doesTileContainEntity","locationX","locationY","radius","PreciseShadowcasting","isImmoveable","visibility","drawTile","document","body","appendChild","getContainer","j","addEntity","getFreeTiles","freeCellIndex","xyParts","split","parseInt","setX","setY","removeChild","getElementsByClassName","Player","handleEvent","e","code","keyCode","diff","newX","newY","assertThisInitialized","interactWithCurrentSpace","endPlayerTurn","drawFOVFromLocation","window","addEventListener","removeEventListener","clearDisplay","unlock","doesSpaceContainStairs","logger","logMessage","advanceFloors","actUponSpaceByPlayer","Bat","movingRandomlyTurn","moveARandomDirection","moveTowardsPlayer","get","prototype","possibleChoices","isSpaceCollideable","randomTile","Zombie","skippingTurn","Torch","lit","Message","text","trimTextToMaxCharacters","substring","Logger","messages","drawText","getFormattedText","drawMessages","Game","floor","entities","scheduler","Simple","stairs","start","remove","removeDisplayFromDOM","generatePlayer","generateEnemiesForCurrentFloor","generateActiveEntity","generateEntity","index","newEntity","putActiveEntityInRandomFreeSpace","add","createNewEnemyRandomly","putEntityInRandomFreeSpace","Enemies","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72aeb7f7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n    </div>\n  );\n}\n\nexport default App;\n","export interface IEntityProps {\n    id: number,\n    priority: number,\n    character: string,\n    color: string,\n    collideable: boolean,\n    backgroundColor?: string | null,\n    active: boolean\n};\n\nabstract class Entity {\n    protected id: number;\n    protected character: string;\n    protected color: string;\n    protected backgroundColor: string | null;\n    protected priority: number;\n    protected collideable: boolean;\n    protected active: boolean;\n\n    constructor(props: IEntityProps) {\n        this.id = props.id;\n        this.priority = props.priority;\n        this.character = props.character;\n        this.color = props.color;\n        this.collideable = props.collideable;\n        this.backgroundColor = props.backgroundColor ? props.backgroundColor : null;\n        this.active = props.active;\n    }\n\n    public actUponByEnemy() {}\n\n    public actUponByPlayer() {}\n\n    public getBackgroundColor() {\n        return this.backgroundColor;\n    }\n    \n    public getCharacter() {\n        return this.character;\n    }\n\n    public getCollideable() {\n        return this.collideable;\n    }\n\n    public getColor() {\n        return this.color;\n    }\n\n    public getPriority() {\n        return this.priority;\n    }\n\n    public equals(secondEntity: Entity) {\n        return this.id === secondEntity.id\n    }\n}\n\nexport default Entity;","import Entity, { IEntityProps } from './entity';\nimport Game from '../game';\nimport * as ROT from 'rot-js';\n\nexport interface IActiveEntityProps {\n    x: number,\n    y: number,\n    game: Game,\n    id: number,\n    priority: number,\n    character: string,\n    color: string,\n    collideable: boolean,\n    backgroundColor?: string | null\n}\n\nabstract class ActiveEntity extends Entity {\n    x: number;\n    y: number;\n    game: Game;\n\n    constructor(props: IActiveEntityProps) {\n        super({\n            active: true,\n            id: props.id,\n            priority: props.priority,\n            character: props.character,\n            color: props.color,\n            collideable: props.collideable,\n            backgroundColor: props.backgroundColor,\n        });\n        this.x = props.x;\n        this.y = props.y;\n        this.game = props.game;\n    }\n\n    public act() {\n        this.game.engine.lock();\n    }\n\n    protected moveTowardsPlayer(topology: 4 | 8) {\n        var x = this.game.player.getX();\n        var y = this.game.player.getY();\n        var passableCallback = (x: number, y: number) => {\n            return !this.game.map.isSpaceOccupied(x, y);\n        }\n        var astar = new ROT.Path.AStar(x, y, passableCallback, { topology });\n\n        var path: Array<[number, number]> = [];\n        var pathCallback = function(x: number, y: number) {\n            path.push([x, y]);\n        }\n        astar.compute(this.x, this.y, pathCallback);\n\n        path.shift(); // Remove current position\n        if (path.length > 0) {\n            x = path[0][0];\n            y = path[0][1];\n            this.game.map.moveEntity(this, x, y);\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    protected interactWithCurrentSpace() {\n        this.game.map.actUponSpaceByEnemy(this.x, this.y);\n    }\n\n    protected isInPositionOfPlayer() {\n        return this.x === this.game.player.getX() && this.y === this.game.player.getY();\n    }\n\n    protected removeSelf() {\n        this.game.removeEntity(this);\n    }\n\n    public actUponByPlayer() {\n        this.removeSelf();\n    }\n\n    public actUponByEnemy() {}\n\n    public getX() {\n        return this.x;\n    }\n\n    public getY() {\n        return this.y;\n    }\n\n    public setX(x: number) {\n        this.x = x;\n    }\n\n    public setY(y: number) {\n        this.y = y;\n    }\n}\n\nexport default ActiveEntity;","import Entity from '../entities/entity';\nimport ActiveEntity from '../entities/activeEntity';\n\nclass Tile {\n    private _entities: Array<Entity>;\n\n    constructor(\n        entity: Entity\n    ) {\n        this._entities = new Array<Entity>(entity);\n    }\n\n    public actUponByEnemy() {\n        this._entities.forEach(entity => {\n            entity.actUponByEnemy();\n        })\n    }\n\n    public actUponByPlayer() {\n        this._entities.forEach(entity => {\n            entity.actUponByPlayer();\n        });\n    }\n\n    public addEntity(entity: Entity) {\n        this._entities.push(entity);\n    }\n\n    public doesTileContainEntity(entity: Entity) {\n        for (let i = 0; i < this._entities.length; i++) {\n            if (entity.equals(this._entities[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public getDisplayedTile() {\n        if (this._entities.length <= 0) {\n            return null;\n        }\n\n        let highestPriorityEntity = this._entities[0];\n\n        for (let i = 1; i < this._entities.length; i++) {\n            if (this._entities[i].getPriority() > highestPriorityEntity.getPriority()) {\n                highestPriorityEntity = this._entities[i];\n            }\n        }\n        \n        return highestPriorityEntity;\n    }\n\n    public isCollideable() {\n        let collideable = false;\n        this._entities.forEach(entity => {\n            if (entity.getCollideable()) {\n                collideable = true;\n            }\n        });\n        return collideable;\n    }\n\n    public isImmoveable() {\n        let immoveable = false;\n        this._entities.forEach(entity => {\n            if (entity.getCollideable() && !(entity instanceof ActiveEntity)) {\n                immoveable = true;\n            }\n        })\n        return immoveable;\n    }\n\n    public removeEntity(entity: Entity) {\n        const foundEntity = this._entities.find((existingEntity) => {\n            return existingEntity.equals(entity);\n        })\n\n        if (foundEntity) {\n            this._entities.splice(this._entities.indexOf(foundEntity), 1);\n        }\n    }\n}\n\nexport default Tile;","//Display\nexport const FONT_SIZE = 15;\nexport const DISPLAY_WIDTH = 100;\nexport const MAP_HEIGHT = 40;\nexport const CONSOLE_HEIGHT = 20;\n\n//Console\nexport const GENERIC_COLOR = '#FFFFFF';\nexport const DANGER_COLOR = '#FF0000';\n\n//Entities\nexport const PLAYER = {\n    ID: -1,\n    CHAR: '@',\n    COLOR: '#00FF00',\n    PRIORITY: 100,\n    VISION_RADIUS: 12\n}\n\n//Enemies\nexport const ENEMY_TYPE_COUNT = 2;\nexport const BAT = {\n    CHAR: 'b',\n    COLOR: '#0066ff',\n    PRIORITY: 41\n}\nexport const ZOMBIE = {\n    CHAR: 'z',\n    COLOR: '#CC00FF',\n    PRIORITY: 40\n}\n\n//Environment\nexport const BOX = {\n    CHAR: '*',\n    COLOR: '#FFFF00',\n    PRIORITY: 1\n}\nexport const FLOOR = {\n    CHAR: '.',\n    COLOR: '#808080',\n    PRIORITY: -1\n}\nexport const TORCH = {\n    CHAR: '^',\n    UNLIT_COLOR: '#BFBFBF',\n    LIT_COLOR: '#FF9900',\n    PRIORITY: 4,\n    VISION_RADIUS: 4\n}\nexport const STAIRS = {\n    ID: -2,\n    CHAR: '<',\n    COLOR: 'orange',\n    PRIORITY: 10\n}\nexport const WALL = {\n    CHAR: '#',\n    COLOR: '#FFFFFF',\n    PRIORITY: 0\n}\n\n//Map Types\nexport const MAP_TYPE = {\n    ARENA: 'arena',\n    CELLULAR: 'cellular',\n    DUNGEON_DIGGER: 'digger',\n    DUNGEON_ROGUE: 'rogue',\n    DUNGEON_UNIFORM: 'uniform',\n    MAZE_DIVIDED: 'divided_maze',\n    MAZE_ELLER: 'eller_maze',\n    MAZE_ICEY: 'icey_maze',\n}\n\n//RNG\nexport const ID_UPPER_BOUND = 999999;\n\n//KeyCodes\nexport const MOVEMENT_KEYCODES: { [keyCode: number]: number } = {\n    38: 0,\n    56: 0,\n    33: 1,\n    57: 1,\n    39: 2,\n    54: 2,\n    34: 3,\n    51: 3,\n    40: 4,\n    50: 4,\n    35: 5,\n    49: 5,\n    37: 6,\n    52: 6,\n    36: 7,\n    55: 7\n}\nexport const COMMA = 188;","import Entity from '../entity';\nimport { RNG } from 'rot-js';\nimport { ID_UPPER_BOUND, WALL } from '../../constants';\n\nclass Wall extends Entity {\n    constructor() {\n        const id = RNG.getUniformInt(0, ID_UPPER_BOUND);\n        super({\n            id, \n            priority: WALL.PRIORITY,\n            character: WALL.CHAR,\n            color: WALL.COLOR,\n            collideable: true,\n            active: false\n        });\n    }\n}\n\nexport default Wall;","import Entity from '../entity';\nimport { RNG } from 'rot-js';\nimport { ID_UPPER_BOUND, FLOOR } from '../../constants';\n\nclass Floor extends Entity {\n    constructor() {\n        const id = RNG.getUniformInt(0, ID_UPPER_BOUND);\n        super({\n            id, \n            priority: FLOOR.PRIORITY,\n            character: FLOOR.CHAR,\n            color: FLOOR.COLOR,\n            collideable: false,\n            active: false\n        });\n    }\n}\n\nexport default Floor;","import Entity from '../entity';\nimport { STAIRS } from '../../constants';\n\nclass Stairs extends Entity {\n    constructor() {\n        super({\n            id: STAIRS.ID,\n            priority: STAIRS.PRIORITY,\n            character: STAIRS.CHAR,\n            color: STAIRS.COLOR,\n            collideable: false,\n            active: false\n        });\n    }\n}\n\nexport default Stairs;","import * as ROT from 'rot-js';\nimport ActiveEntity from '../entities/activeEntity';\nimport Tile from './tile';\nimport Wall from '../entities/environment/wall';\nimport Floor from '../entities/environment/floor'\nimport { MAP_HEIGHT, DISPLAY_WIDTH, MAP_TYPE, FONT_SIZE } from '../constants';\nimport Entity from '../entities/entity';\nimport Stairs from '../entities/environment/stairs';\n\nclass Map {\n    private _map: Array<Array<Tile>>;\n    private display: ROT.Display;\n\n    constructor() {\n        this._map = this.create2DArrayOfTiles(DISPLAY_WIDTH, MAP_HEIGHT);\n        this.display = new ROT.Display({\n            width: DISPLAY_WIDTH,\n            height: MAP_HEIGHT,\n            fontSize: FONT_SIZE\n        });\n        this.generateMap(MAP_TYPE.DUNGEON_UNIFORM);\n    }\n\n    private create2DArrayOfTiles(width: number, height: number) {\n        let array = new Array<Array<Tile>>(width);\n        \n        for (let i = 0; i < width; i++) {\n            array[i] = new Array<Tile>(height);\n        }\n\n        return array;\n    }\n\n    private drawTile(x: number, y: number) {\n        let entity = this._map[x][y].getDisplayedTile();\n        if (!entity) {\n            entity = new Floor();\n        }\n        this.display.draw(x, y, entity.getCharacter(), entity.getColor(), entity.getBackgroundColor());\n    }\n\n    private generateMap( type: string = MAP_TYPE.ARENA ) {\n        this.addDisplayToDOM();\n\n        var mapper = null;\n        switch(type) {\n            case MAP_TYPE.ARENA:\n                mapper = new ROT.Map.Arena(DISPLAY_WIDTH, MAP_HEIGHT);\n                break;\n            case MAP_TYPE.CELLULAR:\n                mapper = new ROT.Map.Cellular(\n                    DISPLAY_WIDTH,\n                    MAP_HEIGHT, \n                    {\n                        born: [4, 5, 6, 7, 8],\n                        survive: [2, 3, 4, 5, 6],\n                    }\n                );\n                mapper.randomize(0.25);\n                break;\n            case MAP_TYPE.DUNGEON_DIGGER:\n                mapper = new ROT.Map.Digger(\n                    DISPLAY_WIDTH,\n                    MAP_HEIGHT,\n                    {\n                        corridorLength: [2,5],\n                        dugPercentage: 0.8,\n                        roomHeight: [4, 8],\n                        roomWidth: [4, 8],\n                    }\n                );\n                break;\n            case MAP_TYPE.DUNGEON_ROGUE:\n                mapper = new ROT.Map.Rogue(DISPLAY_WIDTH, MAP_HEIGHT, {});\n                break;\n            case MAP_TYPE.DUNGEON_UNIFORM:\n                mapper = new ROT.Map.Uniform(\n                    DISPLAY_WIDTH,\n                    MAP_HEIGHT,\n                    {\n                        roomDugPercentage: 0.5,\n                        roomHeight: [4, 12],\n                        roomWidth: [4, 12],\n                    }\n                );\n                break;\n            case MAP_TYPE.MAZE_DIVIDED:\n                mapper = new ROT.Map.DividedMaze(DISPLAY_WIDTH, MAP_HEIGHT);\n                break;\n            case MAP_TYPE.MAZE_ELLER:\n                mapper = new ROT.Map.EllerMaze(DISPLAY_WIDTH, MAP_HEIGHT);\n                break;\n            case MAP_TYPE.MAZE_ICEY:\n                mapper = new ROT.Map.IceyMaze(DISPLAY_WIDTH, MAP_HEIGHT);\n                break;\n            default:\n                mapper = new ROT.Map.Arena(DISPLAY_WIDTH, MAP_HEIGHT);\n                break;\n        }\n\n        var mapperCallback = (x: number, y: number, value: number) => {\n            //value = 1 -> wall\n            //value = 0 -> empty space\n            if (value) {\n                this._map[x][y] = new Tile(new Wall());\n            } else {\n                this._map[x][y] = new Tile(new Floor());\n            }\n        }\n\n        mapper.create(mapperCallback);\n        if (type === MAP_TYPE.CELLULAR) {\n            for (var i = 0; i < 40; i++) {\n                mapper.create(() => {});\n            }\n            mapper.create(mapperCallback.bind(this));\n        }\n    }\n\n    private getFreeTiles() {\n        let freeTiles = new Array<string>();\n        \n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                if (!this._map[x][y].isCollideable()) {\n                    freeTiles.push(x + ',' + y);\n                }\n            }\n        }\n\n        return freeTiles;\n    }\n\n    public clearDisplay() {\n        this.display.clear();\n    }\n\n    public doesSpaceContainStairs(x: number, y: number) {\n        return this._map[x][y].doesTileContainEntity(new Stairs());\n    }\n\n    public drawFOVFromLocation(locationX: number, locationY: number, radius: number) {\n        const lightPasses = (x: number, y: number) => {\n            if (x >= 0 && x < DISPLAY_WIDTH && y >= 0 && y < MAP_HEIGHT) {\n                if (!this._map[x][y].isImmoveable()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        const fov = new ROT.FOV.PreciseShadowcasting(lightPasses);\n\n        fov.compute(\n            locationX,\n            locationY,\n            radius,\n            (x: number, y: number, radius: number, visibility: number) => {\n                this.drawTile(x, y);\n            }\n        );\n    }\n\n    public actUponSpaceByEnemy(x: number, y: number) {\n        this._map[x][y].actUponByEnemy();\n    }\n\n    public actUponSpaceByPlayer(x: number, y: number) {\n        this._map[x][y].actUponByPlayer();\n    }\n\n    public addDisplayToDOM() {\n        let element = document.body.appendChild(this.display.getContainer()!);\n        element.className = 'game-map';\n    }\n\n    public isSpaceCollideable(x: number, y: number) {\n        return this._map[x][y].isCollideable();\n    }\n\n    public isSpaceOccupied(x: number, y: number) {\n        return this._map[x][y].isImmoveable();\n    }\n\n    public moveEntity(entity: Entity, x: number, y: number) {\n        for (let i = 0; i < this._map.length; i++) {\n            for (let j = 0; j < this._map[i].length; j++) {\n                if (this._map[i][j].doesTileContainEntity(entity)) {\n                    this._map[i][j].removeEntity(entity);\n                    this._map[x][y].addEntity(entity);\n                    return;\n                }\n            }\n        }\n    }\n\n    public putActiveEntityInRandomFreeSpace(entity: ActiveEntity) {\n        let freeTiles = this.getFreeTiles();\n        if (freeTiles.length === 0) {\n            return false;\n        }\n        const freeCellIndex = ROT.RNG.getUniformInt(0, freeTiles.length - 1);\n        const xyParts = freeTiles[freeCellIndex].split(',');\n        freeTiles.splice(freeCellIndex, 1);\n        const x = parseInt(xyParts[0]);\n        const y = parseInt(xyParts[1]);\n\n        entity.setX(x);\n        entity.setY(y);\n\n        this._map[x][y].addEntity(entity);\n        return true;\n    }\n\n    public putEntityInRandomFreeSpace(entity: Entity) {\n        let freeTiles = this.getFreeTiles();\n        if (freeTiles.length === 0) {\n            return false;\n        }\n\n        const freeCellIndex = ROT.RNG.getUniformInt(0, freeTiles.length - 1);\n        const xyParts = freeTiles[freeCellIndex].split(',');\n        freeTiles.splice(freeCellIndex, 1);\n        const x = parseInt(xyParts[0]);\n        const y = parseInt(xyParts[1]);\n\n        this._map[x][y].addEntity(entity);\n        return true;\n    }\n\n    public removeDisplayFromDOM() {\n        document.body.removeChild(document.body.getElementsByClassName('game-map')[0]);\n    }\n\n    public removeEntity(entity: ActiveEntity) {\n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                this._map[x][y].removeEntity(entity);\n            }\n        }\n    }\n}\n\nexport default Map;","import ActiveEntity from './activeEntity';\nimport * as ROT from 'rot-js';\nimport { PLAYER, COMMA, MOVEMENT_KEYCODES, DANGER_COLOR } from '../constants';\nimport Game from '../game';\nimport Stairs from './environment/stairs';\n\nclass Player extends ActiveEntity{\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: PLAYER.ID,\n            priority: PLAYER.PRIORITY,\n            character: PLAYER.CHAR,\n            color: PLAYER.COLOR,\n            collideable: true,\n        })\n    }\n\n    public act() {\n        this.game.engine.lock();\n        this.game.map.drawFOVFromLocation(this.x, this.y, PLAYER.VISION_RADIUS);\n        window.document.addEventListener('keydown', this.handleEvent);\n    }\n\n    private handleEvent = (e: any) => {\n        var code = e.keyCode;\n\n        if (!(code in MOVEMENT_KEYCODES)) {\n            return;\n        }\n\n        var diff = ROT.DIRS[8][MOVEMENT_KEYCODES[code]];\n        let newX = this.x + diff[0];\n        let newY = this.y + diff[1];\n\n        if (this.game.map.isSpaceOccupied(newX, newY)) {\n            return;\n        }\n\n        this.game.map.moveEntity(this, newX, newY);\n        this.x = newX;\n        this.y = newY;\n        this.interactWithCurrentSpace();\n        this.endPlayerTurn();\n    }\n\n    private endPlayerTurn() {\n        window.document.removeEventListener('keydown', this.handleEvent);\n        this.game.map.clearDisplay();\n        this.game.engine.unlock();\n    }\n\n    protected interactWithCurrentSpace() {\n        if (this.game.map.doesSpaceContainStairs(this.x, this.y)) {\n            this.game.logger.logMessage('You ascend..');\n            this.game.advanceFloors();\n        }\n        this.game.map.actUponSpaceByPlayer(this.x, this.y);\n    }\n\n    public actUponByEnemy() {\n        this.game.logger.logMessage('You were slain!', DANGER_COLOR);\n        this.removeSelf();\n        this.game.engine.lock();\n    }\n\n    public actUponByPlayer() {}\n}\n\nexport default Player;","import ActiveEntity from '../activeEntity';\nimport Game from '../../game';\nimport * as ROT from 'rot-js';\nimport { BAT, ID_UPPER_BOUND } from '../../constants';\n\nclass Bat extends ActiveEntity {\n    private movingRandomlyTurn = false;\n\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: ROT.RNG.getUniformInt(0, ID_UPPER_BOUND),\n            priority: BAT.PRIORITY,\n            character: BAT.CHAR,\n            color: BAT.COLOR,\n            collideable: true\n        })\n    }\n\n    public act() {\n        if (!this.movingRandomlyTurn) {\n            this.moveTowardsPlayer(8);\n        } else {\n            this.moveARandomDirection();\n        }\n        this.interactWithCurrentSpace();\n        this.movingRandomlyTurn = !this.movingRandomlyTurn;\n    }\n\n    public actUponByPlayer() {\n        this.game.logger.logMessage('You have slain a bat!');\n        super.actUponByPlayer();\n    }\n\n    private moveARandomDirection() {\n        let possibleChoices = new Array<[number, number]>()\n        \n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (!this.game.map.isSpaceCollideable(this.x + x, this.y + y)) {\n                    possibleChoices.push([this.x + x, this.y + y]);\n                }\n            }\n        }\n\n        if (possibleChoices.length > 0) {\n            const randomTile = possibleChoices[ROT.RNG.getUniformInt(0, possibleChoices.length - 1)];\n            this.game.map.moveEntity(this, randomTile[0], randomTile[1]);\n            this.x = randomTile[0];\n            this.y = randomTile[1];\n        }\n    }\n}\n\nexport default Bat;","import ActiveEntity from '../activeEntity';\nimport Game from '../../game';\nimport * as ROT from 'rot-js';\nimport { ZOMBIE, ID_UPPER_BOUND } from '../../constants';\n\nclass Zombie extends ActiveEntity {\n    private skippingTurn = false;\n\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: ROT.RNG.getUniformInt(0, ID_UPPER_BOUND),\n            priority: ZOMBIE.PRIORITY,\n            character: ZOMBIE.CHAR,\n            color: ZOMBIE.COLOR,\n            collideable: true\n        })\n    }\n\n    public act() {\n        if (!this.skippingTurn) {\n            super.moveTowardsPlayer(4);\n        } else if (super.isInPositionOfPlayer()) {\n            super.removeSelf();\n        }\n        this.interactWithCurrentSpace();\n        this.skippingTurn = !this.skippingTurn;\n    }\n\n    public actUponByPlayer() {\n        this.game.logger.logMessage('You have slain a zombie!');\n        super.actUponByPlayer();\n    }\n}\n\nexport default Zombie;","import ActiveEntity from '../activeEntity';\nimport Game from '../../game';\nimport * as ROT from 'rot-js';\nimport { TORCH, ID_UPPER_BOUND, DANGER_COLOR } from '../../constants';\n\nclass Torch extends ActiveEntity {\n    private lit = false;\n\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: ROT.RNG.getUniformInt(0, ID_UPPER_BOUND),\n            priority: TORCH.PRIORITY,\n            character: TORCH.CHAR,\n            color: TORCH.UNLIT_COLOR,\n            collideable: true\n        })\n    }\n\n    public act() {\n        if (this.lit) {\n            this.game.map.drawFOVFromLocation(this.x, this.y, TORCH.VISION_RADIUS);\n        }\n    }\n\n    public actUponByPlayer() {\n        if (!this.lit) {\n            this.game.logger.logMessage('You have lit a torch.');\n            this.lit = true;\n            this.color = TORCH.LIT_COLOR;\n        }\n    }\n\n    public actUponByEnemy() {\n        if (this.lit) {\n            this.game.logger.logMessage('Another creature has quenched a torch.', DANGER_COLOR);\n            this.lit = false;\n            this.color = TORCH.UNLIT_COLOR;\n        }\n    }\n}\n\nexport default Torch;","import { DISPLAY_WIDTH, GENERIC_COLOR } from '../constants';\n\nclass Message {\n    color: string;\n    text: string;\n    constructor(text: string, color: string = GENERIC_COLOR) {\n        this.text = text;\n        this.color = color;\n        this.trimTextToMaxCharacters();\n    }\n\n    public getFormattedText() {\n        return '%c{' + this.color + '}' + this.text + '%c{}';\n    }\n\n    private trimTextToMaxCharacters() {\n        if (this.text.length > DISPLAY_WIDTH) {\n            this.text = this.text.substring(0, DISPLAY_WIDTH);\n        }\n    }\n}\n\nexport default Message;","import Message from './message';\nimport * as ROT from 'rot-js';\nimport { GENERIC_COLOR, DISPLAY_WIDTH, CONSOLE_HEIGHT } from '../constants';\n\nclass Logger {\n    private messages = new Array<Message>();\n    private display: ROT.Display;\n    constructor() {\n        this.display = new ROT.Display({\n            width: DISPLAY_WIDTH,\n            height: CONSOLE_HEIGHT,\n            fontSize: 15\n        })\n        this.addDisplayToDOM();\n        this.logMessage('You enter the mansion of Strahd von Zarovich. Good luck.')\n    }\n\n    private addDisplayToDOM() {\n        let element = document.body.appendChild(this.display.getContainer()!);\n        element.className = 'logger';\n    }\n\n    private drawMessages() {\n        this.display.clear();\n        for (let i = 0; i < this.messages.length; i++) {\n            this.display.drawText(1, i + 1, this.messages[i].getFormattedText());\n        }\n    }\n\n    public logMessage(text: string, color: string = GENERIC_COLOR) {\n        if (this.messages.length >= CONSOLE_HEIGHT - 2) {\n            this.messages.shift();\n        }\n        this.messages.push(new Message(text, color));\n        this.drawMessages();\n    }\n}\n\nexport default Logger;","import ActiveEntity from './entities/activeEntity';\nimport Entity from './entities/entity';\nimport Map from './map/map';\nimport Player from './entities/player';\nimport * as ROT from 'rot-js';\nimport { ENEMY_TYPE_COUNT } from './constants';\nimport * as Enemies from './entities/enemies';\nimport { Stairs } from './entities/environment';\nimport Torch from './entities/environment/torch';\nimport Logger from './logger/logger';\n\nclass Game {\n    logger: Logger;\n    floor: number;\n    engine: ROT.Engine;\n    entities: Array<ActiveEntity>;\n    player: Player;\n    map: Map;\n    scheduler = new ROT.Scheduler.Simple();\n    stairs?: Stairs;\n\n    constructor() {\n        this.floor = 0;\n        this.engine = new ROT.Engine(this.scheduler);\n        this.entities = new Array<ActiveEntity>();\n        this.player = new Player(-1, -1, this);\n        this.logger = new Logger();\n        this.map = new Map();\n        this.advanceFloors();\n        this.engine.start();\n    }\n\n    public advanceFloors() {\n        this.floor++;\n        if (this.player) {\n            this.scheduler.remove(this.player);\n        }\n        while (this.entities.length > 0) {\n            this.removeEntity(this.entities[0]);\n        }\n        if (this.map) {\n            this.map.removeDisplayFromDOM();\n        }\n        this.map = new Map();\n\n        this.entities = new Array<ActiveEntity>();\n\n        this.generatePlayer(this.player);\n        this.generateEnemiesForCurrentFloor();\n        for (let i = 0; i < 10; i++) {\n            this.generateActiveEntity(Torch);\n        }\n        this.stairs = this.generateEntity(Stairs);\n    }\n\n    public removeEntity(entity: ActiveEntity) {\n        this.map.removeEntity(entity);\n        this.scheduler.remove(entity);\n        var index = this.entities.indexOf(entity);\n        this.entities.splice(index, 1);\n    }\n\n    private generateActiveEntity(type: new (x: number, y: number, game: Game) => ActiveEntity) {\n        const newEntity = new type(-1, -1, this);\n        const placeable = this.map.putActiveEntityInRandomFreeSpace(newEntity);\n        if (placeable) {\n            this.entities.push(newEntity);\n            this.scheduler.add(newEntity, true);\n        }\n    }\n\n    private generateEnemiesForCurrentFloor() {\n        for (let i = 0; i < this.floor * 4; i++) {\n            this.createNewEnemyRandomly();\n        }\n    }\n\n    private generateEntity(type: new () => Entity) {\n        const newEntity = new type();\n        const placeable = this.map.putEntityInRandomFreeSpace(newEntity);\n        if (placeable) {\n            return newEntity;\n        }\n    }\n\n    private generatePlayer(player: Player) {\n        const placeable = this.map.putActiveEntityInRandomFreeSpace(player);\n        if (placeable) {\n            this.scheduler.add(player, true);\n        }\n    }\n\n    private createNewEnemyRandomly() {\n        switch (ROT.RNG.getUniformInt(1, ENEMY_TYPE_COUNT)) {\n            case(1):\n                return this.generateActiveEntity(Enemies.Bat);\n            case(2):\n                return this.generateActiveEntity(Enemies.Zombie);\n            default:\n                return this.generateActiveEntity(Enemies.Bat);\n        };\n    }\n}\n\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Game from './game/game';\nimport * as serviceWorker from './serviceWorker';\n\nconst game = new Game();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}