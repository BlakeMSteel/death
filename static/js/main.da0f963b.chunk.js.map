{"version":3,"sources":["App.js","game/map/tile.ts","game/entities/entity.ts","game/constants.ts","game/entities/wall.ts","game/entities/floor.ts","game/map/map.ts","game/entities/activeEntity.ts","game/entities/player.ts","game/entities/zombie.ts","game/entities/bat.ts","game/game.ts","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","Tile","entity","Object","classCallCheck","this","_entities","Array","push","includes","length","highestPriorityEntity","i","priority","collideable","forEach","immoveable","active","foundEntity","find","existingEntity","equals","splice","indexOf","Entity","props","id","character","color","backgroundColor","DISPLAY_WIDTH","DISPLAY_HEIGHT","BAT","CHAR","COLOR","PRIORITY","FLOOR","PLAYER","ID","WALL","ZOMBIE","MAP_TYPE","ARENA","CELLULAR","DUNGEON_DIGGER","DUNGEON_ROGUE","DUNGEON_UNIFORM","MAZE_DIVIDED","MAZE_ELLER","MAZE_ICEY","ID_UPPER_BOUND","Wall","RNG","getUniformInt","possibleConstructorReturn","getPrototypeOf","call","Floor","Map","width","height","draw","_map","_draw","create2DArrayOfTiles","generateMap","array","x","y","drawTile","getDisplayedTile","_this","type","arguments","undefined","mapper","ROT","Arena","Cellular","born","survive","randomize","Digger","corridorLength","dugPercentage","roomHeight","roomWidth","Rogue","Uniform","roomDugPercentage","DividedMaze","EllerMaze","IceyMaze","mapperCallback","value","create","bind","drawMap","freeTiles","isCollideable","isImmoveable","j","checkEntity","removeEntity","addEntity","getFreeTiles","freeCellIndex","xyParts","split","parseInt","setX","setY","ActiveEntity","game","engine","lock","topology","_this2","isInPositionOfPlayer","removeSelf","player","getX","getY","astar","AStar","map","isSpaceOccupied","path","compute","shift","alert","moveEntity","Player","handleEvent","e","keyMap","38","33","39","34","40","35","37","36","code","keyCode","diff","newX","newY","assertThisInitialized","window","removeEventListener","unlock","document","addEventListener","Zombie","skippingTurn","get","prototype","Bat","movingRandomlyTurn","moveARandomDirection","moveTowardsPlayer","possibleChoices","isSpaceCollideable","randomTile","Game","display","entities","scheduler","Simple","fontSize","body","appendChild","getContainer","generatePlayer","generateEntity","start","newEntity","putActiveEntityInRandomFreeSpace","add","remove","index","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da0f963b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n","import Entity from '../entities/entity';\n\nclass Tile {\n    private _entities: Array<Entity>;\n\n    constructor(\n        entity: Entity\n    ) {\n        this._entities = new Array<Entity>(entity);\n    }\n\n    public addEntity(entity: Entity) {\n        this._entities.push(entity);\n    }\n\n    public checkEntity(entity: Entity) {\n        return this._entities.includes(entity);\n    }\n\n    public getDisplayedTile() {\n        if (this._entities.length <= 0) {\n            return null;\n        }\n\n        let highestPriorityEntity = this._entities[0];\n\n        for (let i = 1; i < this._entities.length; i++) {\n            if (this._entities[i].priority > highestPriorityEntity.priority) {\n                highestPriorityEntity = this._entities[i];\n            }\n        }\n        \n        return highestPriorityEntity;\n    }\n\n    public isCollideable() {\n        let collideable = false;\n        this._entities.forEach(entity => {\n            if (entity.collideable) {\n                collideable = true;\n            }\n        });\n        return collideable;\n    }\n\n    public isImmoveable() {\n        let immoveable = false;\n        this._entities.forEach(entity => {\n            if (entity.collideable && !entity.active) {\n                immoveable = true;\n            }\n        })\n        return immoveable;\n    }\n\n    public removeEntity(entity: Entity) {\n        const foundEntity = this._entities.find((existingEntity) => {\n            return existingEntity.equals(entity);\n        })\n\n        if (foundEntity) {\n            this._entities.splice(this._entities.indexOf(foundEntity), 1);\n        }\n    }\n}\n\nexport default Tile;","export interface IEntityProps {\n    id: number,\n    priority: number,\n    character: string,\n    color: string,\n    collideable: boolean,\n    backgroundColor?: string | null,\n    active: boolean\n};\n\nabstract class Entity {\n    public id: number;\n    public character: string;\n    public color: string;\n    public backgroundColor: string | null;\n    public priority: number;\n    public collideable: boolean;\n    public active: boolean;\n\n    constructor(props: IEntityProps) {\n        this.id = props.id;\n        this.priority = props.priority;\n        this.character = props.character;\n        this.color = props.color;\n        this.collideable = props.collideable;\n        this.backgroundColor = props.backgroundColor ? props.backgroundColor : null;\n        this.active = props.active;\n    }\n\n    public equals(entity: Entity) {\n        return this.id === entity.id\n    }\n}\n\nexport default Entity;","//Display\nexport const DISPLAY_WIDTH = 100;\nexport const DISPLAY_HEIGHT = 40;\n\n//Entities\nexport const BAT = {\n    CHAR: \"b\",\n    COLOR: \"blue\",\n    PRIORITY: 3\n}\nexport const BOX = {\n    CHAR: \"*\",\n    COLOR: \"#FFFF00\",\n    PRIORITY: 1\n}\nexport const FLOOR = {\n    CHAR: \".\",\n    COLOR: \"#CCCCCC\",\n    PRIORITY: -1\n}\nexport const PLAYER = {\n    ID: -1,\n    CHAR: \"@\",\n    COLOR: \"#00FF00\",\n    PRIORITY: 100\n}\nexport const WALL = {\n    CHAR: \" \",\n    COLOR: \"#FFFFFF\",\n    PRIORITY: 0\n}\nexport const ZOMBIE = {\n    CHAR: \"z\",\n    COLOR: \"#CC00FF\",\n    PRIORITY: 2\n}\n\n//Map Types\nexport const MAP_TYPE = {\n    ARENA: 'arena',\n    CELLULAR: 'cellular',\n    DUNGEON_DIGGER: 'digger',\n    DUNGEON_ROGUE: 'rogue',\n    DUNGEON_UNIFORM: 'uniform',\n    MAZE_DIVIDED: 'divided_maze',\n    MAZE_ELLER: 'eller_maze',\n    MAZE_ICEY: 'icey_maze',\n}\n\n//RNG\nexport const ID_UPPER_BOUND = 999999;","import Entity from './entity';\nimport { RNG } from 'rot-js';\nimport { ID_UPPER_BOUND, WALL } from '../constants';\n\nclass Wall extends Entity {\n    constructor() {\n        const id = RNG.getUniformInt(0, ID_UPPER_BOUND);\n        super({\n            id, \n            priority: WALL.PRIORITY,\n            character: WALL.CHAR,\n            color: WALL.COLOR,\n            collideable: true,\n            active: false\n        });\n    }\n}\n\nexport default Wall;","import Entity from './entity';\nimport { RNG } from 'rot-js';\nimport { ID_UPPER_BOUND, FLOOR } from '../constants';\n\nclass Floor extends Entity {\n    constructor() {\n        const id = RNG.getUniformInt(0, ID_UPPER_BOUND);\n        super({\n            id, \n            priority: FLOOR.PRIORITY,\n            character: FLOOR.CHAR,\n            color: FLOOR.COLOR,\n            collideable: false,\n            active: false\n        });\n    }\n}\n\nexport default Floor;","import * as ROT from 'rot-js';\nimport ActiveEntity from '../entities/activeEntity';\nimport Tile from './tile';\nimport Wall from '../entities/wall';\nimport Floor from '../entities/floor'\nimport { DISPLAY_HEIGHT, DISPLAY_WIDTH, MAP_TYPE } from '../constants';\nimport Entity from '../entities/entity';\n\nclass Map {\n    private _map: Array<Array<Tile>>;\n    private _draw: (\n        x: number,\n        y: number,\n        character: string | string[] | null,\n        color: string | null,\n        backgroundColor: string | null\n        ) => void;\n\n    constructor(\n        width: number,\n        height: number,\n        draw: (\n            x: number,\n            y: number,\n            character: string | string[] | null,\n            color: string | null,\n            backgroundColor: string | null\n            ) => void\n    ) {\n        this._map = this.create2DArrayOfTiles(width, height);\n        this._draw = draw;\n        this.generateMap(MAP_TYPE.DUNGEON_UNIFORM);\n    }\n\n    private create2DArrayOfTiles(width: number, height: number) {\n        let array = new Array<Array<Tile>>(width);\n        \n        for (let i = 0; i < width; i++) {\n            array[i] = new Array<Tile>(height);\n        }\n\n        return array;\n    }\n\n    private drawMap() {\n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                this.drawTile(x, y);\n            }\n        }\n    }\n\n    private drawTile(x: number, y: number) {\n        let entity = this._map[x][y].getDisplayedTile();\n        if (!entity) {\n            entity = new Floor();\n        }\n        this._draw(x, y, entity.character, entity.color, entity.backgroundColor);\n    }\n\n    private generateMap( type: string = MAP_TYPE.ARENA ) {\n        var mapper = null;\n        switch(type) {\n            case MAP_TYPE.ARENA:\n                mapper = new ROT.Map.Arena(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            case MAP_TYPE.CELLULAR:\n                mapper = new ROT.Map.Cellular(\n                    DISPLAY_WIDTH,\n                    DISPLAY_HEIGHT, \n                    {\n                        born: [4, 5, 6, 7, 8],\n                        survive: [2, 3, 4, 5, 6],\n                    }\n                );\n                mapper.randomize(0.25);\n                break;\n            case MAP_TYPE.DUNGEON_DIGGER:\n                mapper = new ROT.Map.Digger(\n                    DISPLAY_WIDTH,\n                    DISPLAY_HEIGHT,\n                    {\n                        corridorLength: [2,5],\n                        dugPercentage: 0.8,\n                        roomHeight: [4, 8],\n                        roomWidth: [4, 8],\n                    }\n                );\n                break;\n            case MAP_TYPE.DUNGEON_ROGUE:\n                mapper = new ROT.Map.Rogue(DISPLAY_WIDTH, DISPLAY_HEIGHT, {});\n                break;\n            case MAP_TYPE.DUNGEON_UNIFORM:\n                mapper = new ROT.Map.Uniform(\n                    DISPLAY_WIDTH,\n                    DISPLAY_HEIGHT,\n                    {\n                        roomDugPercentage: 0.5,\n                        roomHeight: [4, 12],\n                        roomWidth: [4, 12],\n                    }\n                );\n                break;\n            case MAP_TYPE.MAZE_DIVIDED:\n                mapper = new ROT.Map.DividedMaze(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            case MAP_TYPE.MAZE_ELLER:\n                mapper = new ROT.Map.EllerMaze(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            case MAP_TYPE.MAZE_ICEY:\n                mapper = new ROT.Map.IceyMaze(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            default:\n                mapper = new ROT.Map.Arena(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n        }\n\n        var mapperCallback = (x: number, y: number, value: number) => {\n            //value = 1 -> wall\n            //value = 0 -> empty space\n            var key = x + \",\" + y;\n            if (value) {\n                this._map[x][y] = new Tile(new Wall());\n            } else {\n                this._map[x][y] = new Tile(new Floor());\n            }\n        }\n\n        mapper.create(mapperCallback);\n        if (type === MAP_TYPE.CELLULAR) {\n            for (var i = 0; i < 40; i++) {\n                mapper.create(() => {});\n            }\n            mapper.create(mapperCallback.bind(this));\n        }\n\n        this.drawMap();\n    }\n\n    private getFreeTiles() {\n        let freeTiles = new Array<string>();\n        \n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                if (!this._map[x][y].isCollideable()) {\n                    freeTiles.push(x + \",\" + y);\n                }\n            }\n        }\n\n        return freeTiles;\n    }\n\n    public isSpaceCollideable(x: number, y: number) {\n        return this._map[x][y].isCollideable();\n    }\n\n    public isSpaceOccupied(x: number, y: number) {\n        return this._map[x][y].isImmoveable();\n    }\n\n    public moveEntity(entity: Entity, x: number, y: number) {\n        for (let i = 0; i < this._map.length; i++) {\n            for (let j = 0; j < this._map[i].length; j++) {\n                if (this._map[i][j].checkEntity(entity)) {\n                    this._map[i][j].removeEntity(entity);\n                    this.drawTile(i, j);\n                    this._map[x][y].addEntity(entity);\n                    this.drawTile(x, y);\n                }\n            }\n        }\n    }\n\n    public putActiveEntityInRandomFreeSpace(entity: ActiveEntity) {\n        let freeTiles = this.getFreeTiles();\n        if (freeTiles.length === 0) {\n            return false;\n        }\n        const freeCellIndex = ROT.RNG.getUniformInt(0, freeTiles.length - 1);\n        const xyParts = freeTiles[freeCellIndex].split(\",\");\n        freeTiles.splice(freeCellIndex, 1);\n        const x = parseInt(xyParts[0]);\n        const y = parseInt(xyParts[1]);\n\n        entity.setX(x);\n        entity.setY(y);\n\n        this._map[x][y].addEntity(entity);\n        this.drawTile(x, y);\n        return true;\n    }\n\n    public removeEntity(entity: ActiveEntity) {\n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                this._map[x][y].removeEntity(entity);\n            }\n        }\n    }\n}\n\nexport default Map;","import Entity, { IEntityProps } from \"./entity\";\nimport Game from \"../game\";\nimport * as ROT from \"rot-js\";\n\nexport interface IActiveEntityProps {\n    x: number,\n    y: number,\n    game: Game,\n    id: number,\n    priority: number,\n    character: string,\n    color: string,\n    collideable: boolean,\n    backgroundColor?: string | null\n}\n\nabstract class ActiveEntity extends Entity {\n    x: number;\n    y: number;\n    game: Game;\n\n    constructor(props: IActiveEntityProps) {\n        super({\n            active: true,\n            id: props.id,\n            priority: props.priority,\n            character: props.character,\n            color: props.color,\n            collideable: props.collideable,\n            backgroundColor: props.backgroundColor,\n        });\n        this.x = props.x;\n        this.y = props.y;\n        this.game = props.game;\n    }\n\n    public act() {\n        this.game.engine.lock();\n    }\n\n    protected moveTowardsPlayer(topology: 4 | 8) {\n        if (this.isInPositionOfPlayer()) {\n            this.removeSelf();\n            return;\n        }\n        var x = this.game.player.getX();\n        var y = this.game.player.getY();\n        var passableCallback = (x: number, y: number) => {\n            return !this.game.map.isSpaceOccupied(x, y);\n        }\n        var astar = new ROT.Path.AStar(x, y, passableCallback, { topology });\n\n        var path: Array<[number, number]> = [];\n        var pathCallback = function(x: number, y: number) {\n            path.push([x, y]);\n        }\n        astar.compute(this.x, this.y, pathCallback);\n\n        path.shift(); // Remove current position\n        if (path.length == 1) {\n            alert(\"Game over - you were captured!\");\n            this.game.engine.lock();\n        } else {\n            x = path[0][0];\n            y = path[0][1];\n            this.game.map.moveEntity(this, x, y);\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    protected isInPositionOfPlayer() {\n        return this.x === this.game.player.getX() && this.y === this.game.player.getY();\n    }\n\n    protected removeSelf() {\n        this.game.removeEntity(this);\n    }\n\n    public getX() {\n        return this.x;\n    }\n\n    public getY() {\n        return this.y;\n    }\n\n    public setX(x: number) {\n        this.x = x;\n    }\n\n    public setY(y: number) {\n        this.y = y;\n    }\n}\n\nexport default ActiveEntity;","import ActiveEntity from './activeEntity';\nimport * as ROT from 'rot-js';\nimport { PLAYER } from '../constants';\nimport Game from '../game';\n\nclass Player extends ActiveEntity{\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: PLAYER.ID,\n            priority: PLAYER.PRIORITY,\n            character: PLAYER.CHAR,\n            color: PLAYER.COLOR,\n            collideable: true,\n        })\n    }\n\n    public act() {\n        this.game.engine.lock();\n        window.document.addEventListener(\"keydown\", this.handleEvent);\n    }\n\n    private handleEvent = (e: any) => {\n        let keyMap: { [keyCode: number]: number } = {\n            38: 0,\n            33: 1,\n            39: 2,\n            34: 3,\n            40: 4,\n            35: 5,\n            37: 6,\n            36: 7\n        };\n\n        var code = e.keyCode;\n\n        if (!(code in keyMap)) {\n            return;\n        }\n\n        var diff = ROT.DIRS[8][keyMap[code]];\n        let newX = this.x + diff[0];\n        let newY = this.y + diff[1];\n\n        if (this.game.map.isSpaceOccupied(newX, newY)) {\n            return;\n        }\n\n        this.game.map.moveEntity(this, newX, newY);\n        this.x = newX;\n        this.y = newY;\n        window.removeEventListener(\"keydown\", this.handleEvent);\n        this.game.engine.unlock();\n    }\n}\n\nexport default Player;","import ActiveEntity from './activeEntity';\nimport Game from '../game';\nimport * as ROT from 'rot-js';\nimport { ZOMBIE, ID_UPPER_BOUND } from '../constants';\n\nclass Zombie extends ActiveEntity {\n    private skippingTurn = false;\n\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: ROT.RNG.getUniformInt(0, ID_UPPER_BOUND),\n            priority: ZOMBIE.PRIORITY,\n            character: ZOMBIE.CHAR,\n            color: ZOMBIE.COLOR,\n            collideable: true\n        })\n    }\n\n    public act() {\n        if (!this.skippingTurn) {\n            super.moveTowardsPlayer(4);\n        } else if (super.isInPositionOfPlayer()) {\n            super.removeSelf();\n        }\n        this.skippingTurn = !this.skippingTurn;\n    }\n}\n\nexport default Zombie;","import ActiveEntity from './activeEntity';\nimport Game from '../game';\nimport * as ROT from 'rot-js';\nimport { BAT, ID_UPPER_BOUND } from '../constants';\n\nclass Bat extends ActiveEntity {\n    private movingRandomlyTurn = false;\n\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: ROT.RNG.getUniformInt(0, ID_UPPER_BOUND),\n            priority: BAT.PRIORITY,\n            character: BAT.CHAR,\n            color: BAT.COLOR,\n            collideable: true\n        })\n    }\n\n    public act() {\n        if (!this.movingRandomlyTurn) {\n            this.moveTowardsPlayer(8);\n        } else {\n            this.moveARandomDirection();\n        }\n        this.movingRandomlyTurn = !this.movingRandomlyTurn;\n    }\n\n    private moveARandomDirection() {\n        if (super.isInPositionOfPlayer()) {\n            super.removeSelf();\n            return;\n        }\n        let possibleChoices = new Array<[number, number]>()\n        \n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (!this.game.map.isSpaceCollideable(this.x + x, this.y + y)) {\n                    possibleChoices.push([this.x + x, this.y + y]);\n                }\n            }\n        }\n\n        if (possibleChoices.length > 0) {\n            const randomTile = possibleChoices[ROT.RNG.getUniformInt(0, possibleChoices.length - 1)];\n            this.game.map.moveEntity(this, randomTile[0], randomTile[1]);\n            this.x = randomTile[0];\n            this.y = randomTile[1];\n        }\n    }\n}\n\nexport default Bat;","import ActiveEntity from './entities/activeEntity.js';\nimport Map from './map/map';\nimport Player from './entities/player';\nimport * as ROT from 'rot-js';\nimport { DISPLAY_HEIGHT, DISPLAY_WIDTH } from './constants';\nimport Zombie from './entities/zombie';\nimport Bat from './entities/bat';\n\nclass Game {\n    display: ROT.Display;\n    engine: ROT.Engine;\n    entities: Array<ActiveEntity>;\n    player: Player;\n    map: Map;\n    scheduler = new ROT.Scheduler.Simple();\n\n    constructor() {\n        this.display = new ROT.Display({\n            width: DISPLAY_WIDTH,\n            height: DISPLAY_HEIGHT,\n            fontSize: 15\n        });\n\n        document.body.appendChild(this.display.getContainer()!);\n\n        this.map = new Map(DISPLAY_WIDTH, DISPLAY_HEIGHT, this.display.draw.bind(this.display));\n        \n        this.entities = new Array<ActiveEntity>();\n        this.player = new Player(-1, -1, this);\n        this.generatePlayer(this.player);\n        this.generateEntity(Zombie);\n        this.generateEntity(Bat);\n\n        this.engine = new ROT.Engine(this.scheduler);\n        this.engine.start();\n    }\n\n    private generateEntity(type: new (x: number, y: number, game: Game) => ActiveEntity) {\n        const newEntity = new type(-1, -1, this);\n        const placeable = this.map.putActiveEntityInRandomFreeSpace(newEntity);\n        if (placeable) {\n            this.entities.push(newEntity);\n            this.scheduler.add(newEntity, true);\n        }\n    }\n\n    private generatePlayer(player: Player) {\n        const placeable = this.map.putActiveEntityInRandomFreeSpace(player);\n        if (placeable) {\n            this.player = player;\n            this.scheduler.add(player, true);\n        }\n    }\n\n    public removeEntity(entity: ActiveEntity) {\n        this.map.removeEntity(entity);\n        this.scheduler.remove(entity);\n        var index = this.entities.indexOf(entity);\n        this.entities.splice(index, 1);\n    }\n}\n\nexport default Game;\n\n// var Game = {\n//     display: null,\n\n//     init: function() {\n//         this.display = new ROT.Display({\n//             width: displayWidth,\n//             height: displayHeight,\n//             fontSize: 15\n//         });\n//         document.body.appendChild(this.display.getContainer());\n//         this._generateMap(mapType.DUNGEON_UNIFORM);\n//         this.scheduler = new ROT.Scheduler.Simple();\n//         if (this.player) {\n//             this.scheduler.add(this.player, true);\n//         }\n//         for (var index in this.entities) {\n//             this.scheduler.add(this.entities[index], true);\n//         }\n//         this.engine = new ROT.Engine(this.scheduler);\n//         this.engine.start();\n//     },\n// }\n\n// Game.map = {};\n// Game.player = null;\n// Game.entities = new Array();\n// Game.scheduler = null;\n// Game.engine = null;\n// Game.ananas = null;\n\n// Game._generateMap = function(type = mapType.ARENA) {\n//     var mapper = null;\n//     switch(type) {\n//         case mapType.ARENA:\n//             mapper = new ROT.Map.Arena(displayWidth, displayHeight);\n//             break;\n//         case mapType.CELLULAR:\n//             mapper = new ROT.Map.Cellular(\n//                 displayWidth,\n//                 displayHeight, \n//                 { \n//                     connected: true, \n//                     born: [4, 5, 6, 7, 8],\n//                     survive: [2, 3, 4, 5, 6],\n//                 }\n//             );\n//             mapper.randomize(0.25);\n//             break;\n//         case mapType.DUNGEON_DIGGER:\n//             mapper = new ROT.Map.Digger(\n//                 displayWidth,\n//                 displayHeight,\n//                 {\n//                     corridorLength: [2,5],\n//                     dugPercentage: 0.8,\n//                     roomHeight: [4, 8],\n//                     roomWidth: [4, 8],\n//                 }\n//             );\n//             break;\n//         case mapType.DUNGEON_ROGUE:\n//             mapper = new ROT.Map.Rogue(displayWidth, displayHeight);\n//             break;\n//         case mapType.DUNGEON_UNIFORM:\n//             mapper = new ROT.Map.Uniform(\n//                 displayWidth,\n//                 displayHeight,\n//                 {\n//                     roomDugPercentage: 0.5,\n//                     roomHeight: [4, 12],\n//                     roomWidth: [4, 12],\n//                 }\n//             );\n//             break;\n//         case mapType.MAZE_DIVIDED:\n//             mapper = new ROT.Map.DividedMaze(displayWidth, displayHeight);\n//             break;\n//         case mapType.MAZE_ELLER:\n//             mapper = new ROT.Map.EllerMaze(displayWidth, displayHeight);\n//             break;\n//         case mapType.MAZE_ICEY:\n//             mapper = new ROT.Map.IceyMaze(displayWidth, displayHeight);\n//             break;\n//         default:\n//             mapper = new ROT.Map.Arena(displayWidth, displayHeight);\n//             break;\n//     }\n//     var wallTiles = []\n//     var freeCells = [];\n\n//     var mapperCallback = function(x, y, value) {\n//         //value = 1 -> wall\n//         //value = 0 -> empty space\n//         var key = x + \",\" + y;\n//         if (value) {\n//             wallTiles.push(key);\n//             this.map[key] = new Tile(x, y, wallTile, wallColor, null, null, true, Game);\n//         } else {\n//             freeCells.push(key);\n//             this.map[key] = new Tile(x, y, null, null, null, null, false, Game);\n//         }\n//     }\n\n//     mapper.create(mapperCallback.bind(this));\n//     if (type === mapType.CELLULAR) {\n//         for (var i = 0; i < 40; i++) {\n//             mapper.create();\n//         }\n//         mapper.create(mapperCallback.bind(this));\n//         mapper.connect(this.display.DEBUG, 1);\n//     }\n//     this._generateBoxes(freeCells);\n\n//     this._drawWholeMap();\n//     this.player = this._createBeing(Player, freeCells);\n//     this.entities.push(this._createBeing(Pirate, freeCells));\n//     this.entities.push(this._createBeing(Pirate, freeCells));\n//     this.entities.push(this._createBeing(Pirate, freeCells));\n//     this.entities.push(this._createBeing(Pirate, freeCells));\n// }\n\n// Game._drawWholeMap = function() {\n//     for (var key in this.map) {\n//         this.map[key].draw();\n//     }\n// }\n\n// Game._generateBoxes = function(freeCells) {\n//     for (var i = 0; i < 10; i++) {\n//         var index = Math.floor(ROT.RNG.getUniform() * freeCells.length);\n//         var key = freeCells.splice(index, 1)[0];\n//         this.map[key].setFloor(boxTile, boxColor);\n//         if (i === 0) {\n//             this.ananas = key;\n//         }\n//     }\n// }\n\n// Game._createBeing = function(what, freeCells) {\n//     var index = Math.floor(ROT.RNG.getUniform() * freeCells.length);\n//     var key = freeCells.splice(index, 1)[0];\n//     var parts = key.split(\",\");\n//     var x = parseInt(parts[0]);\n//     var y = parseInt(parts[1]);\n//     return new what(x, y, this);\n// }\n\n// Game.removeBeing = function(entity) {\n//     this.scheduler.remove(entity);\n//     var index = this.entities.indexOf(entity);\n//     this.entities.splice(index, 1);\n// }\n\n// Game.init();","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Game from './game/game';\nimport * as serviceWorker from './serviceWorker';\n\nconst game = new Game();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}