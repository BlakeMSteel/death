{"version":3,"sources":["App.js","game/map/tile.ts","game/entities/entity.ts","game/constants.ts","game/entities/environment/wall.ts","game/entities/environment/floor.ts","game/entities/environment/stairs.ts","game/map/map.ts","game/entities/activeEntity.ts","game/entities/player.ts","game/entities/enemies/bat.ts","game/entities/enemies/zombie.ts","game/game.ts","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","Tile","entity","Object","classCallCheck","this","_entities","Array","push","i","length","equals","highestPriorityEntity","priority","collideable","forEach","immoveable","active","foundEntity","find","existingEntity","splice","indexOf","Entity","props","id","character","color","backgroundColor","secondEntity","DISPLAY_WIDTH","DISPLAY_HEIGHT","PLAYER","ID","CHAR","COLOR","PRIORITY","VISION_RADIUS","BAT","ZOMBIE","FLOOR","STAIRS","WALL","MAP_TYPE","ARENA","CELLULAR","DUNGEON_DIGGER","DUNGEON_ROGUE","DUNGEON_UNIFORM","MAZE_DIVIDED","MAZE_ELLER","MAZE_ICEY","ID_UPPER_BOUND","MOVEMENT_KEYCODES","38","56","33","57","39","54","34","51","40","50","35","49","37","52","36","55","COMMA","Wall","RNG","getUniformInt","possibleConstructorReturn","getPrototypeOf","call","Floor","Stairs","Map","width","height","_map","display","create2DArrayOfTiles","ROT","fontSize","generateMap","array","x","y","getDisplayedTile","draw","_this","type","arguments","undefined","document","body","appendChild","getContainer","mapper","Arena","Cellular","born","survive","randomize","Digger","corridorLength","dugPercentage","roomHeight","roomWidth","Rogue","Uniform","roomDugPercentage","DividedMaze","EllerMaze","IceyMaze","mapperCallback","value","create","bind","freeTiles","isCollideable","doesTileContainEntity","locationX","locationY","_this2","clear","PreciseShadowcasting","isImmoveable","compute","radius","visibility","drawTile","j","removeEntity","addEntity","getFreeTiles","freeCellIndex","xyParts","split","parseInt","setX","setY","removeChild","getElementsByTagName","ActiveEntity","game","engine","lock","topology","isInPositionOfPlayer","removeSelf","player","getX","getY","astar","AStar","map","isSpaceOccupied","path","shift","alert","moveEntity","Player","handleEvent","e","code","keyCode","doesSpaceContainStairs","advanceFloors","window","removeEventListener","unlock","diff","newX","newY","assertThisInitialized","drawFOVFromLocation","addEventListener","Bat","movingRandomlyTurn","moveARandomDirection","moveTowardsPlayer","get","prototype","possibleChoices","isSpaceCollideable","randomTile","Zombie","skippingTurn","Game","floor","entities","scheduler","Simple","stairs","start","remove","removeDisplayFromDOM","generatePlayer","generateEntitiesForCurrentFloor","generateEntity","index","newEntity","putActiveEntityInRandomFreeSpace","add","createNewEnemyRandomly","putEntityInRandomFreeSpace","generateActiveEntity","Enemies","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49eec627.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n","import Entity from '../entities/entity';\n\nclass Tile {\n    private _entities: Array<Entity>;\n\n    constructor(\n        entity: Entity\n    ) {\n        this._entities = new Array<Entity>(entity);\n    }\n\n    public addEntity(entity: Entity) {\n        this._entities.push(entity);\n    }\n\n    public doesTileContainEntity(entity: Entity) {\n        for (let i = 0; i < this._entities.length; i++) {\n            if (entity.equals(this._entities[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public getDisplayedTile() {\n        if (this._entities.length <= 0) {\n            return null;\n        }\n\n        let highestPriorityEntity = this._entities[0];\n\n        for (let i = 1; i < this._entities.length; i++) {\n            if (this._entities[i].priority > highestPriorityEntity.priority) {\n                highestPriorityEntity = this._entities[i];\n            }\n        }\n        \n        return highestPriorityEntity;\n    }\n\n    public isCollideable() {\n        let collideable = false;\n        this._entities.forEach(entity => {\n            if (entity.collideable) {\n                collideable = true;\n            }\n        });\n        return collideable;\n    }\n\n    public isImmoveable() {\n        let immoveable = false;\n        this._entities.forEach(entity => {\n            if (entity.collideable && !entity.active) {\n                immoveable = true;\n            }\n        })\n        return immoveable;\n    }\n\n    public removeEntity(entity: Entity) {\n        const foundEntity = this._entities.find((existingEntity) => {\n            return existingEntity.equals(entity);\n        })\n\n        if (foundEntity) {\n            this._entities.splice(this._entities.indexOf(foundEntity), 1);\n        }\n    }\n}\n\nexport default Tile;","export interface IEntityProps {\n    id: number,\n    priority: number,\n    character: string,\n    color: string,\n    collideable: boolean,\n    backgroundColor?: string | null,\n    active: boolean\n};\n\nabstract class Entity {\n    public id: number;\n    public character: string;\n    public color: string;\n    public backgroundColor: string | null;\n    public priority: number;\n    public collideable: boolean;\n    public active: boolean;\n\n    constructor(props: IEntityProps) {\n        this.id = props.id;\n        this.priority = props.priority;\n        this.character = props.character;\n        this.color = props.color;\n        this.collideable = props.collideable;\n        this.backgroundColor = props.backgroundColor ? props.backgroundColor : null;\n        this.active = props.active;\n    }\n\n    public equals(secondEntity: Entity) {\n        return this.id === secondEntity.id\n    }\n}\n\nexport default Entity;","//Display\nexport const DISPLAY_WIDTH = 100;\nexport const DISPLAY_HEIGHT = 40;\n\n//Entities\nexport const BOX = {\n    CHAR: \"*\",\n    COLOR: \"#FFFF00\",\n    PRIORITY: 1\n}\nexport const PLAYER = {\n    ID: -1,\n    CHAR: \"@\",\n    COLOR: \"#00FF00\",\n    PRIORITY: 100,\n    VISION_RADIUS: 12\n}\n\n//Enemies\nexport const ENEMY_TYPE_COUNT = 2;\nexport const BAT = {\n    CHAR: \"b\",\n    COLOR: \"blue\",\n    PRIORITY: 41\n}\nexport const ZOMBIE = {\n    CHAR: \"z\",\n    COLOR: \"#CC00FF\",\n    PRIORITY: 40\n}\n\n//Environment\nexport const FLOOR = {\n    CHAR: \".\",\n    COLOR: \"#808080\",\n    PRIORITY: -1\n}\nexport const STAIRS = {\n    ID: -2,\n    CHAR: \"<\",\n    COLOR: \"orange\",\n    PRIORITY: 2\n}\nexport const WALL = {\n    CHAR: \"#\",\n    COLOR: \"#FFFFFF\",\n    PRIORITY: 0\n}\n\n//Map Types\nexport const MAP_TYPE = {\n    ARENA: 'arena',\n    CELLULAR: 'cellular',\n    DUNGEON_DIGGER: 'digger',\n    DUNGEON_ROGUE: 'rogue',\n    DUNGEON_UNIFORM: 'uniform',\n    MAZE_DIVIDED: 'divided_maze',\n    MAZE_ELLER: 'eller_maze',\n    MAZE_ICEY: 'icey_maze',\n}\n\n//RNG\nexport const ID_UPPER_BOUND = 999999;\n\n//KeyCodes\nexport const MOVEMENT_KEYCODES: { [keyCode: number]: number } = {\n    38: 0,\n    56: 0,\n    33: 1,\n    57: 1,\n    39: 2,\n    54: 2,\n    34: 3,\n    51: 3,\n    40: 4,\n    50: 4,\n    35: 5,\n    49: 5,\n    37: 6,\n    52: 6,\n    36: 7,\n    55: 7\n}\nexport const COMMA = 188;","import Entity from '../entity';\nimport { RNG } from 'rot-js';\nimport { ID_UPPER_BOUND, WALL } from '../../constants';\n\nclass Wall extends Entity {\n    constructor() {\n        const id = RNG.getUniformInt(0, ID_UPPER_BOUND);\n        super({\n            id, \n            priority: WALL.PRIORITY,\n            character: WALL.CHAR,\n            color: WALL.COLOR,\n            collideable: true,\n            active: false\n        });\n    }\n}\n\nexport default Wall;","import Entity from '../entity';\nimport { RNG } from 'rot-js';\nimport { ID_UPPER_BOUND, FLOOR } from '../../constants';\n\nclass Floor extends Entity {\n    constructor() {\n        const id = RNG.getUniformInt(0, ID_UPPER_BOUND);\n        super({\n            id, \n            priority: FLOOR.PRIORITY,\n            character: FLOOR.CHAR,\n            color: FLOOR.COLOR,\n            collideable: false,\n            active: false\n        });\n    }\n}\n\nexport default Floor;","import Entity from '../entity';\nimport { STAIRS } from '../../constants';\n\nclass Stairs extends Entity {\n    constructor() {\n        super({\n            id: STAIRS.ID,\n            priority: STAIRS.PRIORITY,\n            character: STAIRS.CHAR,\n            color: STAIRS.COLOR,\n            collideable: false,\n            active: false\n        });\n    }\n}\n\nexport default Stairs;","import * as ROT from 'rot-js';\nimport ActiveEntity from '../entities/activeEntity';\nimport Tile from './tile';\nimport Wall from '../entities/environment/wall';\nimport Floor from '../entities/environment/floor'\nimport { DISPLAY_HEIGHT, DISPLAY_WIDTH, MAP_TYPE, PLAYER } from '../constants';\nimport Entity from '../entities/entity';\nimport Stairs from '../entities/environment/stairs';\n\nclass Map {\n    private _map: Array<Array<Tile>>;\n    private display: ROT.Display;\n\n    constructor(\n        width: number,\n        height: number,\n    ) {\n        this._map = this.create2DArrayOfTiles(width, height);\n        this.display = new ROT.Display({\n            width,\n            height,\n            fontSize: 15\n        });\n        this.generateMap(MAP_TYPE.DUNGEON_UNIFORM);\n    }\n\n    private create2DArrayOfTiles(width: number, height: number) {\n        let array = new Array<Array<Tile>>(width);\n        \n        for (let i = 0; i < width; i++) {\n            array[i] = new Array<Tile>(height);\n        }\n\n        return array;\n    }\n\n    private drawTile(x: number, y: number) {\n        let entity = this._map[x][y].getDisplayedTile();\n        if (!entity) {\n            entity = new Floor();\n        }\n        this.display.draw(x, y, entity.character, entity.color, entity.backgroundColor);\n    }\n\n    private generateMap( type: string = MAP_TYPE.ARENA ) {\n        document.body.appendChild(this.display.getContainer()!);\n\n        var mapper = null;\n        switch(type) {\n            case MAP_TYPE.ARENA:\n                mapper = new ROT.Map.Arena(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            case MAP_TYPE.CELLULAR:\n                mapper = new ROT.Map.Cellular(\n                    DISPLAY_WIDTH,\n                    DISPLAY_HEIGHT, \n                    {\n                        born: [4, 5, 6, 7, 8],\n                        survive: [2, 3, 4, 5, 6],\n                    }\n                );\n                mapper.randomize(0.25);\n                break;\n            case MAP_TYPE.DUNGEON_DIGGER:\n                mapper = new ROT.Map.Digger(\n                    DISPLAY_WIDTH,\n                    DISPLAY_HEIGHT,\n                    {\n                        corridorLength: [2,5],\n                        dugPercentage: 0.8,\n                        roomHeight: [4, 8],\n                        roomWidth: [4, 8],\n                    }\n                );\n                break;\n            case MAP_TYPE.DUNGEON_ROGUE:\n                mapper = new ROT.Map.Rogue(DISPLAY_WIDTH, DISPLAY_HEIGHT, {});\n                break;\n            case MAP_TYPE.DUNGEON_UNIFORM:\n                mapper = new ROT.Map.Uniform(\n                    DISPLAY_WIDTH,\n                    DISPLAY_HEIGHT,\n                    {\n                        roomDugPercentage: 0.5,\n                        roomHeight: [4, 12],\n                        roomWidth: [4, 12],\n                    }\n                );\n                break;\n            case MAP_TYPE.MAZE_DIVIDED:\n                mapper = new ROT.Map.DividedMaze(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            case MAP_TYPE.MAZE_ELLER:\n                mapper = new ROT.Map.EllerMaze(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            case MAP_TYPE.MAZE_ICEY:\n                mapper = new ROT.Map.IceyMaze(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            default:\n                mapper = new ROT.Map.Arena(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n        }\n\n        var mapperCallback = (x: number, y: number, value: number) => {\n            //value = 1 -> wall\n            //value = 0 -> empty space\n            if (value) {\n                this._map[x][y] = new Tile(new Wall());\n            } else {\n                this._map[x][y] = new Tile(new Floor());\n            }\n        }\n\n        mapper.create(mapperCallback);\n        if (type === MAP_TYPE.CELLULAR) {\n            for (var i = 0; i < 40; i++) {\n                mapper.create(() => {});\n            }\n            mapper.create(mapperCallback.bind(this));\n        }\n    }\n\n    private getFreeTiles() {\n        let freeTiles = new Array<string>();\n        \n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                if (!this._map[x][y].isCollideable()) {\n                    freeTiles.push(x + \",\" + y);\n                }\n            }\n        }\n\n        return freeTiles;\n    }\n\n    public doesSpaceContainStairs(x: number, y: number) {\n        return this._map[x][y].doesTileContainEntity(new Stairs());\n    }\n\n    public drawFOVFromLocation(locationX: number, locationY: number) {\n        this.display.clear();\n        const lightPasses = (x: number, y: number) => {\n            if (x >= 0 && x < DISPLAY_WIDTH && y >= 0 && y < DISPLAY_HEIGHT) {\n                if (!this._map[x][y].isImmoveable()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        const fov = new ROT.FOV.PreciseShadowcasting(lightPasses);\n\n        fov.compute(\n            locationX,\n            locationY,\n            PLAYER.VISION_RADIUS,\n            (x: number, y: number, radius: number, visibility: number) => {\n                this.drawTile(x, y);\n            }\n        );\n    }\n\n    public isSpaceCollideable(x: number, y: number) {\n        return this._map[x][y].isCollideable();\n    }\n\n    public isSpaceOccupied(x: number, y: number) {\n        return this._map[x][y].isImmoveable();\n    }\n\n    public moveEntity(entity: Entity, x: number, y: number) {\n        for (let i = 0; i < this._map.length; i++) {\n            for (let j = 0; j < this._map[i].length; j++) {\n                if (this._map[i][j].doesTileContainEntity(entity)) {\n                    this._map[i][j].removeEntity(entity);\n                    this.drawTile(i, j);\n                    this._map[x][y].addEntity(entity);\n                    return;\n                }\n            }\n        }\n    }\n\n    public putActiveEntityInRandomFreeSpace(entity: ActiveEntity) {\n        let freeTiles = this.getFreeTiles();\n        if (freeTiles.length === 0) {\n            return false;\n        }\n        const freeCellIndex = ROT.RNG.getUniformInt(0, freeTiles.length - 1);\n        const xyParts = freeTiles[freeCellIndex].split(\",\");\n        freeTiles.splice(freeCellIndex, 1);\n        const x = parseInt(xyParts[0]);\n        const y = parseInt(xyParts[1]);\n\n        entity.setX(x);\n        entity.setY(y);\n\n        this._map[x][y].addEntity(entity);\n        return true;\n    }\n\n    public putEntityInRandomFreeSpace(entity: Entity) {\n        let freeTiles = this.getFreeTiles();\n        if (freeTiles.length === 0) {\n            return false;\n        }\n\n        const freeCellIndex = ROT.RNG.getUniformInt(0, freeTiles.length - 1);\n        const xyParts = freeTiles[freeCellIndex].split(\",\");\n        freeTiles.splice(freeCellIndex, 1);\n        const x = parseInt(xyParts[0]);\n        const y = parseInt(xyParts[1]);\n\n        this._map[x][y].addEntity(entity);\n        return true;\n    }\n\n    public removeDisplayFromDOM() {\n        document.body.removeChild(document.body.getElementsByTagName('canvas')[0]);\n    }\n\n    public removeEntity(entity: ActiveEntity) {\n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                this._map[x][y].removeEntity(entity);\n            }\n        }\n    }\n}\n\nexport default Map;","import Entity, { IEntityProps } from \"./entity\";\nimport Game from \"../game\";\nimport * as ROT from \"rot-js\";\n\nexport interface IActiveEntityProps {\n    x: number,\n    y: number,\n    game: Game,\n    id: number,\n    priority: number,\n    character: string,\n    color: string,\n    collideable: boolean,\n    backgroundColor?: string | null\n}\n\nabstract class ActiveEntity extends Entity {\n    x: number;\n    y: number;\n    game: Game;\n\n    constructor(props: IActiveEntityProps) {\n        super({\n            active: true,\n            id: props.id,\n            priority: props.priority,\n            character: props.character,\n            color: props.color,\n            collideable: props.collideable,\n            backgroundColor: props.backgroundColor,\n        });\n        this.x = props.x;\n        this.y = props.y;\n        this.game = props.game;\n    }\n\n    public act() {\n        this.game.engine.lock();\n    }\n\n    protected moveTowardsPlayer(topology: 4 | 8) {\n        if (this.isInPositionOfPlayer()) {\n            this.removeSelf();\n            return;\n        }\n        var x = this.game.player.getX();\n        var y = this.game.player.getY();\n        var passableCallback = (x: number, y: number) => {\n            return !this.game.map.isSpaceOccupied(x, y);\n        }\n        var astar = new ROT.Path.AStar(x, y, passableCallback, { topology });\n\n        var path: Array<[number, number]> = [];\n        var pathCallback = function(x: number, y: number) {\n            path.push([x, y]);\n        }\n        astar.compute(this.x, this.y, pathCallback);\n\n        path.shift(); // Remove current position\n        if (path.length == 0) {\n            \n        } else if (path.length == 1) {\n            alert(\"Game over - you were captured!\");\n            this.game.engine.lock();\n        } else {\n            x = path[0][0];\n            y = path[0][1];\n            this.game.map.moveEntity(this, x, y);\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    protected isInPositionOfPlayer() {\n        return this.x === this.game.player.getX() && this.y === this.game.player.getY();\n    }\n\n    protected removeSelf() {\n        this.game.removeEntity(this);\n    }\n\n    public getX() {\n        return this.x;\n    }\n\n    public getY() {\n        return this.y;\n    }\n\n    public setX(x: number) {\n        this.x = x;\n    }\n\n    public setY(y: number) {\n        this.y = y;\n    }\n}\n\nexport default ActiveEntity;","import ActiveEntity from './activeEntity';\nimport * as ROT from 'rot-js';\nimport { PLAYER, COMMA, MOVEMENT_KEYCODES } from '../constants';\nimport Game from '../game';\nimport Stairs from './environment/stairs';\n\nclass Player extends ActiveEntity{\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: PLAYER.ID,\n            priority: PLAYER.PRIORITY,\n            character: PLAYER.CHAR,\n            color: PLAYER.COLOR,\n            collideable: true,\n        })\n    }\n\n    public act() {\n        this.game.engine.lock();\n        this.game.map.drawFOVFromLocation(this.x, this.y);\n        window.document.addEventListener(\"keydown\", this.handleEvent);\n    }\n\n    private handleEvent = (e: any) => {\n        var code = e.keyCode;\n\n        if (code === COMMA && this.game.map.doesSpaceContainStairs(this.x, this.y)) {\n            this.game.advanceFloors();\n            window.removeEventListener(\"keydown\", this.handleEvent);\n            this.game.engine.unlock();\n            return;\n        }\n\n        if (!(code in MOVEMENT_KEYCODES)) {\n            return;\n        }\n\n        var diff = ROT.DIRS[8][MOVEMENT_KEYCODES[code]];\n        let newX = this.x + diff[0];\n        let newY = this.y + diff[1];\n\n        if (this.game.map.isSpaceOccupied(newX, newY)) {\n            return;\n        }\n\n        this.game.map.moveEntity(this, newX, newY);\n        this.x = newX;\n        this.y = newY;\n        window.removeEventListener(\"keydown\", this.handleEvent);\n        this.game.engine.unlock();\n    }\n}\n\nexport default Player;","import ActiveEntity from '../activeEntity';\nimport Game from '../../game';\nimport * as ROT from 'rot-js';\nimport { BAT, ID_UPPER_BOUND } from '../../constants';\n\nclass Bat extends ActiveEntity {\n    private movingRandomlyTurn = false;\n\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: ROT.RNG.getUniformInt(0, ID_UPPER_BOUND),\n            priority: BAT.PRIORITY,\n            character: BAT.CHAR,\n            color: BAT.COLOR,\n            collideable: true\n        })\n    }\n\n    public act() {\n        if (!this.movingRandomlyTurn) {\n            this.moveTowardsPlayer(8);\n        } else {\n            this.moveARandomDirection();\n        }\n        this.movingRandomlyTurn = !this.movingRandomlyTurn;\n    }\n\n    private moveARandomDirection() {\n        if (super.isInPositionOfPlayer()) {\n            super.removeSelf();\n            return;\n        }\n        let possibleChoices = new Array<[number, number]>()\n        \n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (!this.game.map.isSpaceCollideable(this.x + x, this.y + y)) {\n                    possibleChoices.push([this.x + x, this.y + y]);\n                }\n            }\n        }\n\n        if (possibleChoices.length > 0) {\n            const randomTile = possibleChoices[ROT.RNG.getUniformInt(0, possibleChoices.length - 1)];\n            this.game.map.moveEntity(this, randomTile[0], randomTile[1]);\n            this.x = randomTile[0];\n            this.y = randomTile[1];\n        }\n    }\n}\n\nexport default Bat;","import ActiveEntity from '../activeEntity';\nimport Game from '../../game';\nimport * as ROT from 'rot-js';\nimport { ZOMBIE, ID_UPPER_BOUND } from '../../constants';\n\nclass Zombie extends ActiveEntity {\n    private skippingTurn = false;\n\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: ROT.RNG.getUniformInt(0, ID_UPPER_BOUND),\n            priority: ZOMBIE.PRIORITY,\n            character: ZOMBIE.CHAR,\n            color: ZOMBIE.COLOR,\n            collideable: true\n        })\n    }\n\n    public act() {\n        if (!this.skippingTurn) {\n            super.moveTowardsPlayer(4);\n        } else if (super.isInPositionOfPlayer()) {\n            super.removeSelf();\n        }\n        this.skippingTurn = !this.skippingTurn;\n    }\n}\n\nexport default Zombie;","import ActiveEntity from './entities/activeEntity';\nimport Entity from './entities/entity';\nimport Map from './map/map';\nimport Player from './entities/player';\nimport * as ROT from 'rot-js';\nimport { DISPLAY_HEIGHT, DISPLAY_WIDTH, ENEMY_TYPE_COUNT } from './constants';\nimport * as Enemies from './entities/enemies';\nimport { Stairs } from './entities/environment';\n\nclass Game {\n    floor: number;\n    engine: ROT.Engine;\n    entities: Array<ActiveEntity>;\n    player: Player;\n    map: Map;\n    scheduler = new ROT.Scheduler.Simple();\n    stairs?: Stairs;\n\n    constructor() {\n        this.floor = 0;\n        this.engine = new ROT.Engine(this.scheduler);\n        this.entities = new Array<ActiveEntity>();\n        this.player = new Player(-1, -1, this);\n        this.map = new Map(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n        this.advanceFloors();\n        this.engine.start();\n    }\n\n    public advanceFloors() {\n        this.floor++;\n        if (this.player) {\n            this.scheduler.remove(this.player);\n        }\n        while (this.entities.length > 0) {\n            this.removeEntity(this.entities[0]);\n        }\n        if (this.map) {\n            this.map.removeDisplayFromDOM();\n        }\n        this.map = new Map(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n\n        this.entities = new Array<ActiveEntity>();\n\n        this.generatePlayer(this.player);\n        this.generateEntitiesForCurrentFloor();\n        this.stairs = this.generateEntity(Stairs);\n    }\n\n    public removeEntity(entity: ActiveEntity) {\n        this.map.removeEntity(entity);\n        this.scheduler.remove(entity);\n        var index = this.entities.indexOf(entity);\n        this.entities.splice(index, 1);\n    }\n\n    private generateActiveEntity(type: new (x: number, y: number, game: Game) => ActiveEntity) {\n        const newEntity = new type(-1, -1, this);\n        const placeable = this.map.putActiveEntityInRandomFreeSpace(newEntity);\n        if (placeable) {\n            this.entities.push(newEntity);\n            this.scheduler.add(newEntity, true);\n        }\n    }\n\n    private generateEntitiesForCurrentFloor() {\n        for (let i = 0; i < this.floor * 4; i++) {\n            this.createNewEnemyRandomly();\n        }\n    }\n\n    private generateEntity(type: new () => Entity) {\n        const newEntity = new type();\n        const placeable = this.map.putEntityInRandomFreeSpace(newEntity);\n        if (placeable) {\n            return newEntity;\n        }\n    }\n\n    private generatePlayer(player: Player) {\n        const placeable = this.map.putActiveEntityInRandomFreeSpace(player);\n        if (placeable) {\n            this.scheduler.add(player, true);\n        }\n    }\n\n    private createNewEnemyRandomly() {\n        switch (ROT.RNG.getUniformInt(1, ENEMY_TYPE_COUNT)) {\n            case(1):\n                return this.generateActiveEntity(Enemies.Bat);\n            case(2):\n                return this.generateActiveEntity(Enemies.Zombie);\n            default:\n                return this.generateActiveEntity(Enemies.Bat);\n        };\n    }\n}\n\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Game from './game/game';\nimport * as serviceWorker from './serviceWorker';\n\nconst game = new Game();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}