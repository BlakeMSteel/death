{"version":3,"sources":["App.js","game/map/tile.ts","game/entities/entity.ts","game/constants.ts","game/entities/wall.ts","game/entities/floor.ts","game/map/map.ts","game/entities/activeEntity.ts","game/entities/player.ts","game/entities/zombie.ts","game/entities/bat.ts","game/entities/stairs.ts","game/game.ts","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","Tile","entity","Object","classCallCheck","this","_entities","Array","push","includes","length","highestPriorityEntity","i","priority","collideable","forEach","immoveable","active","foundEntity","find","existingEntity","equals","splice","indexOf","Entity","props","id","character","color","backgroundColor","DISPLAY_WIDTH","DISPLAY_HEIGHT","BAT","CHAR","COLOR","PRIORITY","FLOOR","PLAYER","ID","VISION_RADIUS","STAIRS","WALL","ZOMBIE","MAP_TYPE","ARENA","CELLULAR","DUNGEON_DIGGER","DUNGEON_ROGUE","DUNGEON_UNIFORM","MAZE_DIVIDED","MAZE_ELLER","MAZE_ICEY","ID_UPPER_BOUND","Wall","RNG","getUniformInt","possibleConstructorReturn","getPrototypeOf","call","Floor","Map","width","height","_map","display","create2DArrayOfTiles","ROT","fontSize","generateMap","array","x","y","drawTile","getDisplayedTile","draw","_this","type","arguments","undefined","document","body","appendChild","getContainer","mapper","Arena","Cellular","born","survive","randomize","Digger","corridorLength","dugPercentage","roomHeight","roomWidth","Rogue","Uniform","roomDugPercentage","DividedMaze","EllerMaze","IceyMaze","mapperCallback","value","create","bind","freeTiles","isCollideable","locationX","locationY","_this2","clear","PreciseShadowcasting","isImmoveable","compute","radius","visibility","j","checkEntity","removeEntity","addEntity","getFreeTiles","freeCellIndex","xyParts","split","parseInt","setX","setY","ActiveEntity","game","engine","lock","topology","isInPositionOfPlayer","removeSelf","player","getX","getY","astar","AStar","map","isSpaceOccupied","path","shift","alert","moveEntity","Player","handleEvent","e","keyMap","38","33","39","34","40","35","37","36","code","keyCode","diff","newX","newY","assertThisInitialized","window","removeEventListener","unlock","getFOVFromLocation","addEventListener","Zombie","skippingTurn","get","prototype","Bat","movingRandomlyTurn","moveARandomDirection","moveTowardsPlayer","possibleChoices","isSpaceCollideable","randomTile","Stairs","Game","entities","scheduler","Simple","stairs","generatePlayer","generateActiveEntity","generateEntity","start","newEntity","putActiveEntityInRandomFreeSpace","add","putEntityInRandomFreeSpace","remove","index","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e71e5cd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n","import Entity from '../entities/entity';\n\nclass Tile {\n    private _entities: Array<Entity>;\n\n    constructor(\n        entity: Entity\n    ) {\n        this._entities = new Array<Entity>(entity);\n    }\n\n    public addEntity(entity: Entity) {\n        this._entities.push(entity);\n    }\n\n    public checkEntity(entity: Entity) {\n        return this._entities.includes(entity);\n    }\n\n    public getDisplayedTile() {\n        if (this._entities.length <= 0) {\n            return null;\n        }\n\n        let highestPriorityEntity = this._entities[0];\n\n        for (let i = 1; i < this._entities.length; i++) {\n            if (this._entities[i].priority > highestPriorityEntity.priority) {\n                highestPriorityEntity = this._entities[i];\n            }\n        }\n        \n        return highestPriorityEntity;\n    }\n\n    public isCollideable() {\n        let collideable = false;\n        this._entities.forEach(entity => {\n            if (entity.collideable) {\n                collideable = true;\n            }\n        });\n        return collideable;\n    }\n\n    public isImmoveable() {\n        let immoveable = false;\n        this._entities.forEach(entity => {\n            if (entity.collideable && !entity.active) {\n                immoveable = true;\n            }\n        })\n        return immoveable;\n    }\n\n    public removeEntity(entity: Entity) {\n        const foundEntity = this._entities.find((existingEntity) => {\n            return existingEntity.equals(entity);\n        })\n\n        if (foundEntity) {\n            this._entities.splice(this._entities.indexOf(foundEntity), 1);\n        }\n    }\n}\n\nexport default Tile;","export interface IEntityProps {\n    id: number,\n    priority: number,\n    character: string,\n    color: string,\n    collideable: boolean,\n    backgroundColor?: string | null,\n    active: boolean\n};\n\nabstract class Entity {\n    public id: number;\n    public character: string;\n    public color: string;\n    public backgroundColor: string | null;\n    public priority: number;\n    public collideable: boolean;\n    public active: boolean;\n\n    constructor(props: IEntityProps) {\n        this.id = props.id;\n        this.priority = props.priority;\n        this.character = props.character;\n        this.color = props.color;\n        this.collideable = props.collideable;\n        this.backgroundColor = props.backgroundColor ? props.backgroundColor : null;\n        this.active = props.active;\n    }\n\n    public equals(entity: Entity) {\n        return this.id === entity.id\n    }\n}\n\nexport default Entity;","//Display\nexport const DISPLAY_WIDTH = 100;\nexport const DISPLAY_HEIGHT = 40;\n\n//Entities\nexport const BAT = {\n    CHAR: \"b\",\n    COLOR: \"blue\",\n    PRIORITY: 41\n}\nexport const BOX = {\n    CHAR: \"*\",\n    COLOR: \"#FFFF00\",\n    PRIORITY: 1\n}\nexport const FLOOR = {\n    CHAR: \".\",\n    COLOR: \"#808080\",\n    PRIORITY: -1\n}\nexport const PLAYER = {\n    ID: -1,\n    CHAR: \"@\",\n    COLOR: \"#00FF00\",\n    PRIORITY: 100,\n    VISION_RADIUS: 12\n}\nexport const STAIRS = {\n    ID: -2,\n    CHAR: \"<\",\n    COLOR: \"orange\",\n    PRIORITY: 2\n}\nexport const WALL = {\n    CHAR: \"#\",\n    COLOR: \"#FFFFFF\",\n    PRIORITY: 0\n}\nexport const ZOMBIE = {\n    CHAR: \"z\",\n    COLOR: \"#CC00FF\",\n    PRIORITY: 40\n}\n\n//Map Types\nexport const MAP_TYPE = {\n    ARENA: 'arena',\n    CELLULAR: 'cellular',\n    DUNGEON_DIGGER: 'digger',\n    DUNGEON_ROGUE: 'rogue',\n    DUNGEON_UNIFORM: 'uniform',\n    MAZE_DIVIDED: 'divided_maze',\n    MAZE_ELLER: 'eller_maze',\n    MAZE_ICEY: 'icey_maze',\n}\n\n//RNG\nexport const ID_UPPER_BOUND = 999999;","import Entity from './entity';\nimport { RNG } from 'rot-js';\nimport { ID_UPPER_BOUND, WALL } from '../constants';\n\nclass Wall extends Entity {\n    constructor() {\n        const id = RNG.getUniformInt(0, ID_UPPER_BOUND);\n        super({\n            id, \n            priority: WALL.PRIORITY,\n            character: WALL.CHAR,\n            color: WALL.COLOR,\n            collideable: true,\n            active: false\n        });\n    }\n}\n\nexport default Wall;","import Entity from './entity';\nimport { RNG } from 'rot-js';\nimport { ID_UPPER_BOUND, FLOOR } from '../constants';\n\nclass Floor extends Entity {\n    constructor() {\n        const id = RNG.getUniformInt(0, ID_UPPER_BOUND);\n        super({\n            id, \n            priority: FLOOR.PRIORITY,\n            character: FLOOR.CHAR,\n            color: FLOOR.COLOR,\n            collideable: false,\n            active: false\n        });\n    }\n}\n\nexport default Floor;","import * as ROT from 'rot-js';\nimport ActiveEntity from '../entities/activeEntity';\nimport Tile from './tile';\nimport Wall from '../entities/wall';\nimport Floor from '../entities/floor'\nimport { DISPLAY_HEIGHT, DISPLAY_WIDTH, MAP_TYPE, PLAYER } from '../constants';\nimport Entity from '../entities/entity';\n\nclass Map {\n    private _map: Array<Array<Tile>>;\n    private display: ROT.Display;\n\n    constructor(\n        width: number,\n        height: number,\n    ) {\n        this._map = this.create2DArrayOfTiles(width, height);\n        this.display = new ROT.Display({\n            width,\n            height,\n            fontSize: 15\n        });\n        this.generateMap(MAP_TYPE.DUNGEON_UNIFORM);\n    }\n\n    private create2DArrayOfTiles(width: number, height: number) {\n        let array = new Array<Array<Tile>>(width);\n        \n        for (let i = 0; i < width; i++) {\n            array[i] = new Array<Tile>(height);\n        }\n\n        return array;\n    }\n\n    private drawMap() {\n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                this.drawTile(x, y);\n            }\n        }\n    }\n\n    private drawTile(x: number, y: number) {\n        let entity = this._map[x][y].getDisplayedTile();\n        if (!entity) {\n            entity = new Floor();\n        }\n        this.display.draw(x, y, entity.character, entity.color, entity.backgroundColor);\n    }\n\n    private generateMap( type: string = MAP_TYPE.ARENA ) {\n        document.body.appendChild(this.display.getContainer()!);\n\n        var mapper = null;\n        switch(type) {\n            case MAP_TYPE.ARENA:\n                mapper = new ROT.Map.Arena(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            case MAP_TYPE.CELLULAR:\n                mapper = new ROT.Map.Cellular(\n                    DISPLAY_WIDTH,\n                    DISPLAY_HEIGHT, \n                    {\n                        born: [4, 5, 6, 7, 8],\n                        survive: [2, 3, 4, 5, 6],\n                    }\n                );\n                mapper.randomize(0.25);\n                break;\n            case MAP_TYPE.DUNGEON_DIGGER:\n                mapper = new ROT.Map.Digger(\n                    DISPLAY_WIDTH,\n                    DISPLAY_HEIGHT,\n                    {\n                        corridorLength: [2,5],\n                        dugPercentage: 0.8,\n                        roomHeight: [4, 8],\n                        roomWidth: [4, 8],\n                    }\n                );\n                break;\n            case MAP_TYPE.DUNGEON_ROGUE:\n                mapper = new ROT.Map.Rogue(DISPLAY_WIDTH, DISPLAY_HEIGHT, {});\n                break;\n            case MAP_TYPE.DUNGEON_UNIFORM:\n                mapper = new ROT.Map.Uniform(\n                    DISPLAY_WIDTH,\n                    DISPLAY_HEIGHT,\n                    {\n                        roomDugPercentage: 0.5,\n                        roomHeight: [4, 12],\n                        roomWidth: [4, 12],\n                    }\n                );\n                break;\n            case MAP_TYPE.MAZE_DIVIDED:\n                mapper = new ROT.Map.DividedMaze(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            case MAP_TYPE.MAZE_ELLER:\n                mapper = new ROT.Map.EllerMaze(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            case MAP_TYPE.MAZE_ICEY:\n                mapper = new ROT.Map.IceyMaze(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n            default:\n                mapper = new ROT.Map.Arena(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n                break;\n        }\n\n        var mapperCallback = (x: number, y: number, value: number) => {\n            //value = 1 -> wall\n            //value = 0 -> empty space\n            if (value) {\n                this._map[x][y] = new Tile(new Wall());\n            } else {\n                this._map[x][y] = new Tile(new Floor());\n            }\n        }\n\n        mapper.create(mapperCallback);\n        if (type === MAP_TYPE.CELLULAR) {\n            for (var i = 0; i < 40; i++) {\n                mapper.create(() => {});\n            }\n            mapper.create(mapperCallback.bind(this));\n        }\n    }\n\n    private getFreeTiles() {\n        let freeTiles = new Array<string>();\n        \n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                if (!this._map[x][y].isCollideable()) {\n                    freeTiles.push(x + \",\" + y);\n                }\n            }\n        }\n\n        return freeTiles;\n    }\n\n    public getFOVFromLocation(locationX: number, locationY: number) {\n        this.display.clear();\n        const lightPasses = (x: number, y: number) => {\n            if (x >= 0 && x < DISPLAY_WIDTH && y >= 0 && y < DISPLAY_HEIGHT) {\n                if (!this._map[x][y].isImmoveable()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        const fov = new ROT.FOV.PreciseShadowcasting(lightPasses);\n\n        fov.compute(\n            locationX,\n            locationY,\n            PLAYER.VISION_RADIUS,\n            (x: number, y: number, radius: number, visibility: number) => {\n                this.drawTile(x, y);\n            }\n        );\n    }\n\n    public isSpaceCollideable(x: number, y: number) {\n        return this._map[x][y].isCollideable();\n    }\n\n    public isSpaceOccupied(x: number, y: number) {\n        return this._map[x][y].isImmoveable();\n    }\n\n    public moveEntity(entity: Entity, x: number, y: number) {\n        for (let i = 0; i < this._map.length; i++) {\n            for (let j = 0; j < this._map[i].length; j++) {\n                if (this._map[i][j].checkEntity(entity)) {\n                    this._map[i][j].removeEntity(entity);\n                    this.drawTile(i, j);\n                    this._map[x][y].addEntity(entity);\n                }\n            }\n        }\n    }\n\n    public putActiveEntityInRandomFreeSpace(entity: ActiveEntity) {\n        let freeTiles = this.getFreeTiles();\n        if (freeTiles.length === 0) {\n            return false;\n        }\n        const freeCellIndex = ROT.RNG.getUniformInt(0, freeTiles.length - 1);\n        const xyParts = freeTiles[freeCellIndex].split(\",\");\n        freeTiles.splice(freeCellIndex, 1);\n        const x = parseInt(xyParts[0]);\n        const y = parseInt(xyParts[1]);\n\n        entity.setX(x);\n        entity.setY(y);\n\n        this._map[x][y].addEntity(entity);\n        return true;\n    }\n\n    public putEntityInRandomFreeSpace(entity: Entity) {\n        let freeTiles = this.getFreeTiles();\n        if (freeTiles.length === 0) {\n            return false;\n        }\n\n        const freeCellIndex = ROT.RNG.getUniformInt(0, freeTiles.length - 1);\n        const xyParts = freeTiles[freeCellIndex].split(\",\");\n        freeTiles.splice(freeCellIndex, 1);\n        const x = parseInt(xyParts[0]);\n        const y = parseInt(xyParts[1]);\n\n        this._map[x][y].addEntity(entity);\n        return true;\n    }\n\n    public removeEntity(entity: ActiveEntity) {\n        for (let x = 0; x < this._map.length; x++) {\n            for (let y = 0; y < this._map[x].length; y++) {\n                this._map[x][y].removeEntity(entity);\n            }\n        }\n    }\n}\n\nexport default Map;","import Entity, { IEntityProps } from \"./entity\";\nimport Game from \"../game\";\nimport * as ROT from \"rot-js\";\n\nexport interface IActiveEntityProps {\n    x: number,\n    y: number,\n    game: Game,\n    id: number,\n    priority: number,\n    character: string,\n    color: string,\n    collideable: boolean,\n    backgroundColor?: string | null\n}\n\nabstract class ActiveEntity extends Entity {\n    x: number;\n    y: number;\n    game: Game;\n\n    constructor(props: IActiveEntityProps) {\n        super({\n            active: true,\n            id: props.id,\n            priority: props.priority,\n            character: props.character,\n            color: props.color,\n            collideable: props.collideable,\n            backgroundColor: props.backgroundColor,\n        });\n        this.x = props.x;\n        this.y = props.y;\n        this.game = props.game;\n    }\n\n    public act() {\n        this.game.engine.lock();\n    }\n\n    protected moveTowardsPlayer(topology: 4 | 8) {\n        if (this.isInPositionOfPlayer()) {\n            this.removeSelf();\n            return;\n        }\n        var x = this.game.player.getX();\n        var y = this.game.player.getY();\n        var passableCallback = (x: number, y: number) => {\n            return !this.game.map.isSpaceOccupied(x, y);\n        }\n        var astar = new ROT.Path.AStar(x, y, passableCallback, { topology });\n\n        var path: Array<[number, number]> = [];\n        var pathCallback = function(x: number, y: number) {\n            path.push([x, y]);\n        }\n        astar.compute(this.x, this.y, pathCallback);\n\n        path.shift(); // Remove current position\n        if (path.length == 1) {\n            alert(\"Game over - you were captured!\");\n            this.game.engine.lock();\n        } else {\n            x = path[0][0];\n            y = path[0][1];\n            this.game.map.moveEntity(this, x, y);\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    protected isInPositionOfPlayer() {\n        return this.x === this.game.player.getX() && this.y === this.game.player.getY();\n    }\n\n    protected removeSelf() {\n        this.game.removeEntity(this);\n    }\n\n    public getX() {\n        return this.x;\n    }\n\n    public getY() {\n        return this.y;\n    }\n\n    public setX(x: number) {\n        this.x = x;\n    }\n\n    public setY(y: number) {\n        this.y = y;\n    }\n}\n\nexport default ActiveEntity;","import ActiveEntity from './activeEntity';\nimport * as ROT from 'rot-js';\nimport { PLAYER } from '../constants';\nimport Game from '../game';\n\nclass Player extends ActiveEntity{\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: PLAYER.ID,\n            priority: PLAYER.PRIORITY,\n            character: PLAYER.CHAR,\n            color: PLAYER.COLOR,\n            collideable: true,\n        })\n    }\n\n    public act() {\n        this.game.engine.lock();\n        this.game.map.getFOVFromLocation(this.x, this.y);\n        window.document.addEventListener(\"keydown\", this.handleEvent);\n    }\n\n    private handleEvent = (e: any) => {\n        let keyMap: { [keyCode: number]: number } = {\n            38: 0,\n            33: 1,\n            39: 2,\n            34: 3,\n            40: 4,\n            35: 5,\n            37: 6,\n            36: 7\n        };\n\n        var code = e.keyCode;\n\n        if (!(code in keyMap)) {\n            return;\n        }\n\n        var diff = ROT.DIRS[8][keyMap[code]];\n        let newX = this.x + diff[0];\n        let newY = this.y + diff[1];\n\n        if (this.game.map.isSpaceOccupied(newX, newY)) {\n            return;\n        }\n\n        this.game.map.moveEntity(this, newX, newY);\n        this.x = newX;\n        this.y = newY;\n        window.removeEventListener(\"keydown\", this.handleEvent);\n        this.game.engine.unlock();\n    }\n}\n\nexport default Player;","import ActiveEntity from './activeEntity';\nimport Game from '../game';\nimport * as ROT from 'rot-js';\nimport { ZOMBIE, ID_UPPER_BOUND } from '../constants';\n\nclass Zombie extends ActiveEntity {\n    private skippingTurn = false;\n\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: ROT.RNG.getUniformInt(0, ID_UPPER_BOUND),\n            priority: ZOMBIE.PRIORITY,\n            character: ZOMBIE.CHAR,\n            color: ZOMBIE.COLOR,\n            collideable: true\n        })\n    }\n\n    public act() {\n        if (!this.skippingTurn) {\n            super.moveTowardsPlayer(4);\n        } else if (super.isInPositionOfPlayer()) {\n            super.removeSelf();\n        }\n        this.skippingTurn = !this.skippingTurn;\n    }\n}\n\nexport default Zombie;","import ActiveEntity from './activeEntity';\nimport Game from '../game';\nimport * as ROT from 'rot-js';\nimport { BAT, ID_UPPER_BOUND } from '../constants';\n\nclass Bat extends ActiveEntity {\n    private movingRandomlyTurn = false;\n\n    constructor(x: number, y: number, game: Game) {\n        super({\n            x,\n            y,\n            game,\n            id: ROT.RNG.getUniformInt(0, ID_UPPER_BOUND),\n            priority: BAT.PRIORITY,\n            character: BAT.CHAR,\n            color: BAT.COLOR,\n            collideable: true\n        })\n    }\n\n    public act() {\n        if (!this.movingRandomlyTurn) {\n            this.moveTowardsPlayer(8);\n        } else {\n            this.moveARandomDirection();\n        }\n        this.movingRandomlyTurn = !this.movingRandomlyTurn;\n    }\n\n    private moveARandomDirection() {\n        if (super.isInPositionOfPlayer()) {\n            super.removeSelf();\n            return;\n        }\n        let possibleChoices = new Array<[number, number]>()\n        \n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (!this.game.map.isSpaceCollideable(this.x + x, this.y + y)) {\n                    possibleChoices.push([this.x + x, this.y + y]);\n                }\n            }\n        }\n\n        if (possibleChoices.length > 0) {\n            const randomTile = possibleChoices[ROT.RNG.getUniformInt(0, possibleChoices.length - 1)];\n            this.game.map.moveEntity(this, randomTile[0], randomTile[1]);\n            this.x = randomTile[0];\n            this.y = randomTile[1];\n        }\n    }\n}\n\nexport default Bat;","import Entity from './entity';\nimport { STAIRS } from '../constants';\n\nclass Stairs extends Entity {\n    constructor() {\n        super({\n            id: STAIRS.ID,\n            priority: STAIRS.PRIORITY,\n            character: STAIRS.CHAR,\n            color: STAIRS.COLOR,\n            collideable: false,\n            active: false\n        });\n    }\n}\n\nexport default Stairs;","import ActiveEntity from './entities/activeEntity';\nimport Entity from './entities/entity';\nimport Map from './map/map';\nimport Player from './entities/player';\nimport * as ROT from 'rot-js';\nimport { DISPLAY_HEIGHT, DISPLAY_WIDTH } from './constants';\nimport Zombie from './entities/zombie';\nimport Bat from './entities/bat';\nimport Stairs from './entities/stairs';\n\nclass Game {\n    engine: ROT.Engine;\n    entities: Array<ActiveEntity>;\n    player: Player;\n    map: Map;\n    scheduler = new ROT.Scheduler.Simple();\n    stairs?: Stairs;\n\n    constructor() {\n        this.map = new Map(DISPLAY_WIDTH, DISPLAY_HEIGHT);\n        \n        this.entities = new Array<ActiveEntity>();\n        this.player = new Player(-1, -1, this);\n        this.generatePlayer(this.player);\n        this.generateActiveEntity(Zombie);\n        this.generateActiveEntity(Bat);\n        this.stairs = this.generateEntity(Stairs);\n\n        this.engine = new ROT.Engine(this.scheduler);\n        this.engine.start();\n    }\n\n    private generateActiveEntity(type: new (x: number, y: number, game: Game) => ActiveEntity) {\n        const newEntity = new type(-1, -1, this);\n        const placeable = this.map.putActiveEntityInRandomFreeSpace(newEntity);\n        if (placeable) {\n            this.entities.push(newEntity);\n            this.scheduler.add(newEntity, true);\n        }\n    }\n\n    private generateEntity(type: new () => Entity) {\n        const newEntity = new type();\n        const placeable = this.map.putEntityInRandomFreeSpace(newEntity);\n        if (placeable) {\n            return newEntity;\n        }\n    }\n\n    private generatePlayer(player: Player) {\n        const placeable = this.map.putActiveEntityInRandomFreeSpace(player);\n        if (placeable) {\n            this.player = player;\n            this.scheduler.add(player, true);\n        }\n    }\n\n    public removeEntity(entity: ActiveEntity) {\n        this.map.removeEntity(entity);\n        this.scheduler.remove(entity);\n        var index = this.entities.indexOf(entity);\n        this.entities.splice(index, 1);\n    }\n}\n\nexport default Game;\n\n// var Game = {\n//     display: null,\n\n//     init: function() {\n//         this.display = new ROT.Display({\n//             width: displayWidth,\n//             height: displayHeight,\n//             fontSize: 15\n//         });\n//         document.body.appendChild(this.display.getContainer());\n//         this._generateMap(mapType.DUNGEON_UNIFORM);\n//         this.scheduler = new ROT.Scheduler.Simple();\n//         if (this.player) {\n//             this.scheduler.add(this.player, true);\n//         }\n//         for (var index in this.entities) {\n//             this.scheduler.add(this.entities[index], true);\n//         }\n//         this.engine = new ROT.Engine(this.scheduler);\n//         this.engine.start();\n//     },\n// }\n\n// Game.map = {};\n// Game.player = null;\n// Game.entities = new Array();\n// Game.scheduler = null;\n// Game.engine = null;\n// Game.ananas = null;\n\n// Game._generateMap = function(type = mapType.ARENA) {\n//     var mapper = null;\n//     switch(type) {\n//         case mapType.ARENA:\n//             mapper = new ROT.Map.Arena(displayWidth, displayHeight);\n//             break;\n//         case mapType.CELLULAR:\n//             mapper = new ROT.Map.Cellular(\n//                 displayWidth,\n//                 displayHeight, \n//                 { \n//                     connected: true, \n//                     born: [4, 5, 6, 7, 8],\n//                     survive: [2, 3, 4, 5, 6],\n//                 }\n//             );\n//             mapper.randomize(0.25);\n//             break;\n//         case mapType.DUNGEON_DIGGER:\n//             mapper = new ROT.Map.Digger(\n//                 displayWidth,\n//                 displayHeight,\n//                 {\n//                     corridorLength: [2,5],\n//                     dugPercentage: 0.8,\n//                     roomHeight: [4, 8],\n//                     roomWidth: [4, 8],\n//                 }\n//             );\n//             break;\n//         case mapType.DUNGEON_ROGUE:\n//             mapper = new ROT.Map.Rogue(displayWidth, displayHeight);\n//             break;\n//         case mapType.DUNGEON_UNIFORM:\n//             mapper = new ROT.Map.Uniform(\n//                 displayWidth,\n//                 displayHeight,\n//                 {\n//                     roomDugPercentage: 0.5,\n//                     roomHeight: [4, 12],\n//                     roomWidth: [4, 12],\n//                 }\n//             );\n//             break;\n//         case mapType.MAZE_DIVIDED:\n//             mapper = new ROT.Map.DividedMaze(displayWidth, displayHeight);\n//             break;\n//         case mapType.MAZE_ELLER:\n//             mapper = new ROT.Map.EllerMaze(displayWidth, displayHeight);\n//             break;\n//         case mapType.MAZE_ICEY:\n//             mapper = new ROT.Map.IceyMaze(displayWidth, displayHeight);\n//             break;\n//         default:\n//             mapper = new ROT.Map.Arena(displayWidth, displayHeight);\n//             break;\n//     }\n//     var wallTiles = []\n//     var freeCells = [];\n\n//     var mapperCallback = function(x, y, value) {\n//         //value = 1 -> wall\n//         //value = 0 -> empty space\n//         var key = x + \",\" + y;\n//         if (value) {\n//             wallTiles.push(key);\n//             this.map[key] = new Tile(x, y, wallTile, wallColor, null, null, true, Game);\n//         } else {\n//             freeCells.push(key);\n//             this.map[key] = new Tile(x, y, null, null, null, null, false, Game);\n//         }\n//     }\n\n//     mapper.create(mapperCallback.bind(this));\n//     if (type === mapType.CELLULAR) {\n//         for (var i = 0; i < 40; i++) {\n//             mapper.create();\n//         }\n//         mapper.create(mapperCallback.bind(this));\n//         mapper.connect(this.display.DEBUG, 1);\n//     }\n//     this._generateBoxes(freeCells);\n\n//     this._drawWholeMap();\n//     this.player = this._createBeing(Player, freeCells);\n//     this.entities.push(this._createBeing(Pirate, freeCells));\n//     this.entities.push(this._createBeing(Pirate, freeCells));\n//     this.entities.push(this._createBeing(Pirate, freeCells));\n//     this.entities.push(this._createBeing(Pirate, freeCells));\n// }\n\n// Game._drawWholeMap = function() {\n//     for (var key in this.map) {\n//         this.map[key].draw();\n//     }\n// }\n\n// Game._generateBoxes = function(freeCells) {\n//     for (var i = 0; i < 10; i++) {\n//         var index = Math.floor(ROT.RNG.getUniform() * freeCells.length);\n//         var key = freeCells.splice(index, 1)[0];\n//         this.map[key].setFloor(boxTile, boxColor);\n//         if (i === 0) {\n//             this.ananas = key;\n//         }\n//     }\n// }\n\n// Game._createBeing = function(what, freeCells) {\n//     var index = Math.floor(ROT.RNG.getUniform() * freeCells.length);\n//     var key = freeCells.splice(index, 1)[0];\n//     var parts = key.split(\",\");\n//     var x = parseInt(parts[0]);\n//     var y = parseInt(parts[1]);\n//     return new what(x, y, this);\n// }\n\n// Game.removeBeing = function(entity) {\n//     this.scheduler.remove(entity);\n//     var index = this.entities.indexOf(entity);\n//     this.entities.splice(index, 1);\n// }\n\n// Game.init();","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Game from './game/game';\nimport * as serviceWorker from './serviceWorker';\n\nconst game = new Game();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}